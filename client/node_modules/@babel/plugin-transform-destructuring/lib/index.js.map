<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/util.ts","../src/index.ts"],"sourcesContent":["import { types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { Scope, NodePath } from \"@babel/traverse\";\nimport type { TraversalAncestors } from \"@babel/types\";\n\nfunction isPureVoid(node: t.Node) {\n  return (\n    t.isUnaryExpression(node) &&\n    node.operator === \"void\" &&\n    t.isPureish(node.argument)\n  );\n}\n\nexport function unshiftForXStatementBody(\n  statementPath: NodePath<t.ForXStatement>,\n  newStatements: t.Statement[],\n) {\n  statementPath.ensureBlock();\n  const { scope, node } = statementPath;\n  const bodyScopeBindings = statementPath.get(\"body\").scope.bindings;\n  const hasShadowedBlockScopedBindings = Object.keys(bodyScopeBindings).some(\n    name => scope.hasBinding(name),\n  );\n\n  if (hasShadowedBlockScopedBindings) {\n    // handle shadowed variables referenced in computed keys:\n    // var a = 0;for (const { #x: x, [a++]: y } of z) { const a = 1; }\n    node.body = t.blockStatement([...newStatements, node.body]);\n  } else {\n    node.body.body.unshift(...newStatements);\n  }\n}\n\n/**\n * Test if an ArrayPattern's elements contain any RestElements.\n */\n\nfunction hasArrayRest(pattern: t.ArrayPattern) {\n  return pattern.elements.some(elem => t.isRestElement(elem));\n}\n\n/**\n * Test if an ObjectPattern's properties contain any RestElements.\n */\n\nfunction hasObjectRest(pattern: t.ObjectPattern) {\n  return pattern.properties.some(prop => t.isRestElement(prop));\n}\n\ninterface UnpackableArrayExpression extends t.ArrayExpression {\n  elements: (null | t.Expression)[];\n}\n\nconst STOP_TRAVERSAL = {};\n\ninterface ArrayUnpackVisitorState {\n  deopt: boolean;\n  bindings: Record<string, t.Identifier>;\n}\n\n// NOTE: This visitor is meant to be used via t.traverse\nconst arrayUnpackVisitor = (\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: ArrayUnpackVisitorState,\n) => {\n  if (!ancestors.length) {\n    // Top-level node: this is the array literal.\n    return;\n  }\n\n  if (\n    t.isIdentifier(node) &&\n    t.isReferenced(node, ancestors[ancestors.length - 1].node) &&\n    state.bindings[node.name]\n  ) {\n    state.deopt = true;\n    throw STOP_TRAVERSAL;\n  }\n};\n\nexport type DestructuringTransformerNode =\n  | t.VariableDeclaration\n  | t.ExpressionStatement\n  | t.ReturnStatement;\n\ninterface DestructuringTransformerOption {\n  blockHoist?: number;\n  operator?: t.AssignmentExpression[\"operator\"];\n  nodes?: DestructuringTransformerNode[];\n  kind?: t.VariableDeclaration[\"kind\"];\n  scope: Scope;\n  arrayLikeIsIterable: boolean;\n  iterableIsArray: boolean;\n  objectRestNoSymbols: boolean;\n  useBuiltIns: boolean;\n  addHelper: File[\"addHelper\"];\n}\nexport class DestructuringTransformer {\n  private blockHoist: number;\n  private operator: t.AssignmentExpression[\"operator\"];\n  arrayRefSet: Set<string>;\n  private nodes: DestructuringTransformerNode[];\n  private scope: Scope;\n  private kind: t.VariableDeclaration[\"kind\"];\n  private iterableIsArray: boolean;\n  private arrayLikeIsIterable: boolean;\n  private objectRestNoSymbols: boolean;\n  private useBuiltIns: boolean;\n  private addHelper: File[\"addHelper\"];\n  constructor(opts: DestructuringTransformerOption) {\n    this.blockHoist = opts.blockHoist;\n    this.operator = opts.operator;\n    this.arrayRefSet = new Set();\n    this.nodes = opts.nodes || [];\n    this.scope = opts.scope;\n    this.kind = opts.kind;\n    this.iterableIsArray = opts.iterableIsArray;\n    this.arrayLikeIsIterable = opts.arrayLikeIsIterable;\n    this.objectRestNoSymbols = opts.objectRestNoSymbols;\n    this.useBuiltIns = opts.useBuiltIns;\n    this.addHelper = opts.addHelper;\n  }\n\n  getExtendsHelper() {\n    return this.useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : this.addHelper(\"extends\");\n  }\n\n  buildVariableAssignment(\n    id: t.AssignmentExpression[\"left\"],\n    init: t.Expression,\n  ) {\n    let op = this.operator;\n    if (t.isMemberExpression(id)) op = \"=\";\n\n    let node: t.ExpressionStatement | t.VariableDeclaration;\n\n    if (op) {\n      node = t.expressionStatement(\n        t.assignmentExpression(\n          op,\n          id,\n          t.cloneNode(init) || this.scope.buildUndefinedNode(),\n        ),\n      );\n    } else {\n      let nodeInit: t.Expression;\n\n      if ((this.kind === \"const\" || this.kind === \"using\") && init === null) {\n        nodeInit = this.scope.buildUndefinedNode();\n      } else {\n        nodeInit = t.cloneNode(init);\n      }\n\n      node = t.variableDeclaration(this.kind, [\n        t.variableDeclarator(id, nodeInit),\n      ]);\n    }\n\n    //@ts-expect-error(todo): document block hoist property\n    node._blockHoist = this.blockHoist;\n\n    return node;\n  }\n\n  buildVariableDeclaration(id: t.Identifier, init: t.Expression) {\n    const declar = t.variableDeclaration(\"var\", [\n      t.variableDeclarator(t.cloneNode(id), t.cloneNode(init)),\n    ]);\n    // @ts-expect-error todo(flow->ts): avoid mutations\n    declar._blockHoist = this.blockHoist;\n    return declar;\n  }\n\n  push(id: t.LVal, _init: t.Expression | null) {\n    const init = t.cloneNode(_init);\n    if (t.isObjectPattern(id)) {\n      this.pushObjectPattern(id, init);\n    } else if (t.isArrayPattern(id)) {\n      this.pushArrayPattern(id, init);\n    } else if (t.isAssignmentPattern(id)) {\n      this.pushAssignmentPattern(id, init);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(id, init));\n    }\n  }\n\n  toArray(node: t.Expression, count?: boolean | number) {\n    if (\n      this.iterableIsArray ||\n      (t.isIdentifier(node) && this.arrayRefSet.has(node.name))\n    ) {\n      return node;\n    } else {\n      return this.scope.toArray(node, count, this.arrayLikeIsIterable);\n    }\n  }\n\n  pushAssignmentPattern(\n    { left, right }: t.AssignmentPattern,\n    valueRef: t.Expression | null,\n  ) {\n    // handle array init with void 0. This also happens when\n    // the value was originally a hole.\n    // const [x = 42] = [void 0,];\n    // -> const x = 42;\n    if (isPureVoid(valueRef)) {\n      this.push(left, right);\n      return;\n    }\n\n    // we need to assign the current value of the assignment to avoid evaluating\n    // it more than once\n    const tempId = this.scope.generateUidIdentifierBasedOnNode(valueRef);\n\n    this.nodes.push(this.buildVariableDeclaration(tempId, valueRef));\n\n    const tempConditional = t.conditionalExpression(\n      t.binaryExpression(\n        \"===\",\n        t.cloneNode(tempId),\n        this.scope.buildUndefinedNode(),\n      ),\n      right,\n      t.cloneNode(tempId),\n    );\n\n    if (t.isPattern(left)) {\n      let patternId;\n      let node;\n\n      if (\n        this.kind === \"const\" ||\n        this.kind === \"let\" ||\n        this.kind === \"using\"\n      ) {\n        patternId = this.scope.generateUidIdentifier(tempId.name);\n        node = this.buildVariableDeclaration(patternId, tempConditional);\n      } else {\n        patternId = tempId;\n\n        node = t.expressionStatement(\n          t.assignmentExpression(\"=\", t.cloneNode(tempId), tempConditional),\n        );\n      }\n\n      this.nodes.push(node);\n      this.push(left, patternId);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(left, tempConditional));\n    }\n  }\n\n  pushObjectRest(\n    pattern: t.ObjectPattern,\n    objRef: t.Expression,\n    spreadProp: t.RestElement,\n    spreadPropIndex: number,\n  ) {\n    const value = buildObjectExcludingKeys(\n      pattern.properties.slice(0, spreadPropIndex) as t.ObjectProperty[],\n      objRef,\n      this.scope,\n      name => this.addHelper(name),\n      this.objectRestNoSymbols,\n      this.useBuiltIns,\n    );\n    this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));\n  }\n\n  pushObjectProperty(prop: t.ObjectProperty, propRef: t.Expression) {\n    if (t.isLiteral(prop.key)) prop.computed = true;\n\n    const pattern = prop.value as t.LVal;\n    const objRef = t.memberExpression(\n      t.cloneNode(propRef),\n      prop.key,\n      prop.computed,\n    );\n\n    if (t.isPattern(pattern)) {\n      this.push(pattern, objRef);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(pattern, objRef));\n    }\n  }\n\n  pushObjectPattern(pattern: t.ObjectPattern, objRef: t.Expression) {\n    // https://github.com/babel/babel/issues/681\n\n    if (!pattern.properties.length) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(\n            this.addHelper(\"objectDestructuringEmpty\"),\n            isPureVoid(objRef) ? [] : [objRef],\n          ),\n        ),\n      );\n      return;\n    }\n\n    // if we have more than one properties in this pattern and the objectRef is a\n    // member expression then we need to assign it to a temporary variable so it's\n    // only evaluated once\n\n    if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {\n      const temp = this.scope.generateUidIdentifierBasedOnNode(objRef);\n      this.nodes.push(this.buildVariableDeclaration(temp, objRef));\n      objRef = temp;\n    }\n\n    // Replace impure computed key expressions if we have a rest parameter\n    if (hasObjectRest(pattern)) {\n      let copiedPattern: t.ObjectPattern;\n      for (let i = 0; i < pattern.properties.length; i++) {\n        const prop = pattern.properties[i];\n        if (t.isRestElement(prop)) {\n          break;\n        }\n        const key = prop.key;\n        if (prop.computed && !this.scope.isPure(key)) {\n          const name = this.scope.generateUidIdentifierBasedOnNode(key);\n          this.nodes.push(\n            //@ts-expect-error PrivateName has been handled by destructuring-private\n            this.buildVariableDeclaration(name, key),\n          );\n          if (!copiedPattern) {\n            copiedPattern = pattern = {\n              ...pattern,\n              properties: pattern.properties.slice(),\n            };\n          }\n          copiedPattern.properties[i] = {\n            ...prop,\n            key: name,\n          };\n        }\n      }\n    }\n\n    for (let i = 0; i < pattern.properties.length; i++) {\n      const prop = pattern.properties[i];\n      if (t.isRestElement(prop)) {\n        this.pushObjectRest(pattern, objRef, prop, i);\n      } else {\n        this.pushObjectProperty(prop, objRef);\n      }\n    }\n  }\n\n  canUnpackArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: t.Expression,\n  ): arr is UnpackableArrayExpression {\n    // not an array so there's no way we can deal with this\n    if (!t.isArrayExpression(arr)) return false;\n\n    // pattern has less elements than the array and doesn't have a rest so some\n    // elements wont be evaluated\n    if (pattern.elements.length > arr.elements.length) return;\n    if (\n      pattern.elements.length < arr.elements.length &&\n      !hasArrayRest(pattern)\n    ) {\n      return false;\n    }\n\n    for (const elem of pattern.elements) {\n      // deopt on holes\n      if (!elem) return false;\n\n      // deopt on member expressions as they may be included in the RHS\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    for (const elem of arr.elements) {\n      // deopt on spread elements\n      if (t.isSpreadElement(elem)) return false;\n\n      // deopt call expressions as they might change values of LHS variables\n      if (t.isCallExpression(elem)) return false;\n\n      // deopt on member expressions as they may be getter/setters and have side-effects\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    // deopt on reference to left side identifiers\n    const bindings = t.getBindingIdentifiers(pattern);\n    const state: ArrayUnpackVisitorState = { deopt: false, bindings };\n\n    try {\n      t.traverse(arr, arrayUnpackVisitor, state);\n    } catch (e) {\n      if (e !== STOP_TRAVERSAL) throw e;\n    }\n\n    return !state.deopt;\n  }\n\n  pushUnpackedArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: UnpackableArrayExpression,\n  ) {\n    const holeToUndefined = (el: t.Expression) =>\n      el ?? this.scope.buildUndefinedNode();\n\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n      if (t.isRestElement(elem)) {\n        this.push(\n          elem.argument,\n          t.arrayExpression(arr.elements.slice(i).map(holeToUndefined)),\n        );\n      } else {\n        this.push(elem, holeToUndefined(arr.elements[i]));\n      }\n    }\n  }\n\n  pushArrayPattern(pattern: t.ArrayPattern, arrayRef: t.Expression | null) {\n    if (arrayRef === null) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(this.addHelper(\"objectDestructuringEmpty\"), []),\n        ),\n      );\n      return;\n    }\n    if (!pattern.elements) return;\n\n    // optimise basic array destructuring of an array expression\n    //\n    // we can't do this to a pattern of unequal size to it's right hand\n    // array expression as then there will be values that wont be evaluated\n    //\n    // eg: let [a, b] = [1, 2];\n\n    if (this.canUnpackArrayPattern(pattern, arrayRef)) {\n      return this.pushUnpackedArrayPattern(pattern, arrayRef);\n    }\n\n    // if we have a rest then we need all the elements so don't tell\n    // `scope.toArray` to only get a certain amount\n\n    const count = !hasArrayRest(pattern) && pattern.elements.length;\n\n    // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will\n    // return a locally bound identifier if it's been inferred to be an array,\n    // otherwise it'll be a call to a helper that will ensure it's one\n\n    const toArray = this.toArray(arrayRef, count);\n\n    if (t.isIdentifier(toArray)) {\n      // we've been given an identifier so it must have been inferred to be an\n      // array\n      arrayRef = toArray;\n    } else {\n      arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);\n      this.arrayRefSet.add(arrayRef.name);\n      this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));\n    }\n\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n\n      // hole\n      if (!elem) continue;\n\n      let elemRef;\n\n      if (t.isRestElement(elem)) {\n        elemRef = this.toArray(arrayRef);\n        elemRef = t.callExpression(\n          t.memberExpression(elemRef, t.identifier(\"slice\")),\n          [t.numericLiteral(i)],\n        );\n\n        // set the element to the rest element argument since we've dealt with it\n        // being a rest already\n        this.push(elem.argument, elemRef);\n      } else {\n        elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);\n        this.push(elem, elemRef);\n      }\n    }\n  }\n\n  init(pattern: t.LVal, ref: t.Expression) {\n    // trying to destructure a value that we can't evaluate more than once so we\n    // need to save it to a variable\n\n    if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {\n      const memo = this.scope.maybeGenerateMemoised(ref, true);\n      if (memo) {\n        this.nodes.push(this.buildVariableDeclaration(memo, t.cloneNode(ref)));\n        ref = memo;\n      }\n    }\n\n    this.push(pattern, ref);\n\n    return this.nodes;\n  }\n}\n\ninterface ExcludingKey {\n  key: t.Expression | t.PrivateName;\n  computed: boolean;\n}\n\nexport function buildObjectExcludingKeys<T extends ExcludingKey>(\n  excludedKeys: T[],\n  objRef: t.Expression,\n  scope: Scope,\n  addHelper: File[\"addHelper\"],\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n): t.CallExpression {\n  // get all the keys that appear in this object before the current spread\n\n  const keys = [];\n  let allLiteral = true;\n  let hasTemplateLiteral = false;\n  for (let i = 0; i < excludedKeys.length; i++) {\n    const prop = excludedKeys[i];\n    const key = prop.key;\n    if (t.isIdentifier(key) && !prop.computed) {\n      keys.push(t.stringLiteral(key.name));\n    } else if (t.isTemplateLiteral(key)) {\n      keys.push(t.cloneNode(key));\n      hasTemplateLiteral = true;\n    } else if (t.isLiteral(key)) {\n      // @ts-expect-error todo(flow->ts) NullLiteral\n      keys.push(t.stringLiteral(String(key.value)));\n    } else if (t.isPrivateName(key)) {\n      // private key is not enumerable\n    } else {\n      keys.push(t.cloneNode(key));\n      allLiteral = false;\n    }\n  }\n\n  let value;\n  if (keys.length === 0) {\n    const extendsHelper = useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : addHelper(\"extends\");\n    value = t.callExpression(extendsHelper, [\n      t.objectExpression([]),\n      t.sequenceExpression([\n        t.callExpression(addHelper(\"objectDestructuringEmpty\"), [\n          t.cloneNode(objRef),\n        ]),\n        t.cloneNode(objRef),\n      ]),\n    ]);\n  } else {\n    let keyExpression: t.Expression = t.arrayExpression(keys);\n\n    if (!allLiteral) {\n      keyExpression = t.callExpression(\n        t.memberExpression(keyExpression, t.identifier(\"map\")),\n        [addHelper(\"toPropertyKey\")],\n      );\n    } else if (!hasTemplateLiteral && !t.isProgram(scope.block)) {\n      // Hoist definition of excluded keys, so that it's not created each time.\n      const programScope = scope.getProgramParent();\n      const id = programScope.generateUidIdentifier(\"excluded\");\n\n      programScope.push({\n        id,\n        init: keyExpression,\n        kind: \"const\",\n      });\n\n      keyExpression = t.cloneNode(id);\n    }\n\n    value = t.callExpression(\n      addHelper(`objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`),\n      [t.cloneNode(objRef), keyExpression],\n    );\n  }\n  return value;\n}\n\nexport function convertVariableDeclaration(\n  path: NodePath<t.VariableDeclaration>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope } = path;\n\n  const nodeKind = node.kind;\n  const nodeLoc = node.loc;\n  const nodes = [];\n\n  for (let i = 0; i < node.declarations.length; i++) {\n    const declar = node.declarations[i];\n\n    const patternId = declar.init;\n    const pattern = declar.id;\n\n    const destructuring: DestructuringTransformer =\n      new DestructuringTransformer({\n        // @ts-expect-error(todo): avoid internal properties access\n        blockHoist: node._blockHoist,\n        nodes: nodes,\n        scope: scope,\n        kind: node.kind,\n        iterableIsArray,\n        arrayLikeIsIterable,\n        useBuiltIns,\n        objectRestNoSymbols,\n        addHelper,\n      });\n\n    if (t.isPattern(pattern)) {\n      destructuring.init(pattern, patternId);\n\n      if (+i !== node.declarations.length - 1) {\n        // we aren't the last declarator so let's just make the\n        // last transformed node inherit from us\n        t.inherits(nodes[nodes.length - 1], declar);\n      }\n    } else {\n      nodes.push(\n        t.inherits(\n          destructuring.buildVariableAssignment(pattern, patternId),\n          declar,\n        ),\n      );\n    }\n  }\n\n  let tail: t.VariableDeclaration | null = null;\n  let nodesOut = [];\n  for (const node of nodes) {\n    if (t.isVariableDeclaration(node)) {\n      if (tail !== null) {\n        // Create a single compound declarations\n        tail.declarations.push(...node.declarations);\n        continue;\n      } else {\n        // Make sure the original node kind is used for each compound declaration\n        node.kind = nodeKind;\n        tail = node;\n      }\n    } else {\n      tail = null;\n    }\n    // Propagate the original declaration node's location\n    if (!node.loc) {\n      node.loc = nodeLoc;\n    }\n    nodesOut.push(node);\n  }\n\n  if (\n    nodesOut.length === 2 &&\n    t.isVariableDeclaration(nodesOut[0]) &&\n    t.isExpressionStatement(nodesOut[1]) &&\n    t.isCallExpression(nodesOut[1].expression) &&\n    nodesOut[0].declarations.length === 1\n  ) {\n    // This can only happen when we generate this code:\n    //    var _ref = DESTRUCTURED_VALUE;\n    //     babelHelpers.objectDestructuringEmpty(_ref);\n    // Since pushing those two statements to the for loop .init will require an IIFE,\n    // we can optimize them to\n    //     babelHelpers.objectDestructuringEmpty(DESTRUCTURED_VALUE);\n    const expr = nodesOut[1].expression;\n    expr.arguments = [nodesOut[0].declarations[0].init];\n    nodesOut = [expr];\n  } else {\n    // We must keep nodes all are expressions or statements, so `replaceWithMultiple` can work.\n    if (\n      t.isForStatement(path.parent, { init: node }) &&\n      !nodesOut.some(v => t.isVariableDeclaration(v))\n    ) {\n      for (let i = 0; i < nodesOut.length; i++) {\n        const node: t.Node = nodesOut[i];\n        if (t.isExpressionStatement(node)) {\n          nodesOut[i] = node.expression;\n        }\n      }\n    }\n  }\n\n  if (nodesOut.length === 1) {\n    path.replaceWith(nodesOut[0]);\n  } else {\n    path.replaceWithMultiple(nodesOut);\n  }\n  scope.crawl();\n}\n\nexport function convertAssignmentExpression(\n  path: NodePath<t.AssignmentExpression>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope, parentPath } = path;\n\n  const nodes: DestructuringTransformerNode[] = [];\n\n  const destructuring = new DestructuringTransformer({\n    operator: node.operator,\n    scope: scope,\n    nodes: nodes,\n    arrayLikeIsIterable,\n    iterableIsArray,\n    objectRestNoSymbols,\n    useBuiltIns,\n    addHelper,\n  });\n\n  let ref: t.Identifier | void;\n  if (\n    (!parentPath.isExpressionStatement() &&\n      !parentPath.isSequenceExpression()) ||\n    path.isCompletionRecord()\n  ) {\n    ref = scope.generateUidIdentifierBasedOnNode(node.right, \"ref\");\n\n    nodes.push(\n      t.variableDeclaration(\"var\", [t.variableDeclarator(ref, node.right)]),\n    );\n\n    if (t.isArrayExpression(node.right)) {\n      destructuring.arrayRefSet.add(ref.name);\n    }\n  }\n\n  destructuring.init(node.left, ref || node.right);\n\n  if (ref) {\n    if (parentPath.isArrowFunctionExpression()) {\n      path.replaceWith(t.blockStatement([]));\n      nodes.push(t.returnStatement(t.cloneNode(ref)));\n    } else {\n      nodes.push(t.expressionStatement(t.cloneNode(ref)));\n    }\n  }\n\n  path.replaceWithMultiple(nodes);\n  scope.crawl();\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport {\n  DestructuringTransformer,\n  convertVariableDeclaration,\n  convertAssignmentExpression,\n  unshiftForXStatementBody,\n  type DestructuringTransformerNode,\n} from \"./util\";\nexport { buildObjectExcludingKeys, unshiftForXStatementBody } from \"./util\";\nimport type { NodePath } from \"@babel/traverse\";\n\n/**\n * Test if a VariableDeclaration's declarations contains any Patterns.\n */\n\nfunction variableDeclarationHasPattern(node: t.VariableDeclaration) {\n  for (const declar of node.declarations) {\n    if (t.isPattern(declar.id)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport interface Options {\n  allowArrayLike?: boolean;\n  loose?: boolean;\n  useBuiltIns?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { useBuiltIns = false } = options;\n\n  const iterableIsArray =\n    api.assumption(\"iterableIsArray\") ?? options.loose ?? false;\n  const arrayLikeIsIterable =\n    options.allowArrayLike ?? api.assumption(\"arrayLikeIsIterable\") ?? false;\n  const objectRestNoSymbols =\n    api.assumption(\"objectRestNoSymbols\") ?? options.loose ?? false;\n\n  return {\n    name: \"transform-destructuring\",\n\n    visitor: {\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        if (!variableDeclarationHasPattern(declaration.node)) return;\n\n        const specifiers = [];\n\n        for (const name of Object.keys(path.getOuterBindingIdentifiers())) {\n          specifiers.push(\n            t.exportSpecifier(t.identifier(name), t.identifier(name)),\n          );\n        }\n\n        // Split the declaration and export list into two declarations so that the variable\n        // declaration can be split up later without needing to worry about not being a\n        // top-level statement.\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n        path.scope.crawl();\n      },\n\n      ForXStatement(path: NodePath<t.ForXStatement>) {\n        const { node, scope } = path;\n        const left = node.left;\n\n        if (t.isPattern(left)) {\n          // for ({ length: k } in { abc: 3 });\n\n          const temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [\n            t.variableDeclarator(temp),\n          ]);\n\n          path.ensureBlock();\n          const statementBody = path.node.body.body;\n          const nodes = [];\n          // todo: the completion of a for statement can only be observed from\n          // a do block (or eval that we don't support),\n          // but the new do-expression proposal plans to ban iteration ends in the\n          // do block, maybe we can get rid of this\n          if (statementBody.length === 0 && path.isCompletionRecord()) {\n            nodes.unshift(t.expressionStatement(scope.buildUndefinedNode()));\n          }\n\n          nodes.unshift(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", left, t.cloneNode(temp)),\n            ),\n          );\n\n          unshiftForXStatementBody(path, nodes);\n          scope.crawl();\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) return;\n\n        const pattern = left.declarations[0].id;\n        if (!t.isPattern(pattern)) return;\n\n        const key = scope.generateUidIdentifier(\"ref\");\n        node.left = t.variableDeclaration(left.kind, [\n          t.variableDeclarator(key, null),\n        ]);\n\n        const nodes: DestructuringTransformerNode[] = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: left.kind,\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n\n        destructuring.init(pattern, key);\n\n        unshiftForXStatementBody(path, nodes);\n        scope.crawl();\n      },\n\n      CatchClause({ node, scope }) {\n        const pattern = node.param;\n        if (!t.isPattern(pattern)) return;\n\n        const ref = scope.generateUidIdentifier(\"ref\");\n        node.param = ref;\n\n        const nodes: DestructuringTransformerNode[] = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: \"let\",\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n        destructuring.init(pattern, ref);\n\n        node.body.body = [...nodes, ...node.body.body];\n        scope.crawl();\n      },\n\n      AssignmentExpression(path, state) {\n        if (!t.isPattern(path.node.left)) return;\n        convertAssignmentExpression(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n\n      VariableDeclaration(path, state) {\n        const { node, parent } = path;\n        if (t.isForXStatement(parent)) return;\n        if (!parent || !path.container) return; // i don't know why this is necessary - TODO\n        if (!variableDeclarationHasPattern(node)) return;\n        convertVariableDeclaration(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n    },\n  };\n});\n"],"names":["isPureVoid","node","t","isUnaryExpression","operator","isPureish","argument","unshiftForXStatementBody","statementPath","newStatements","ensureBlock","scope","bodyScopeBindings","get","bindings","hasShadowedBlockScopedBindings","Object","keys","some","name","hasBinding","body","blockStatement","unshift","hasArrayRest","pattern","elements","elem","isRestElement","hasObjectRest","properties","prop","STOP_TRAVERSAL","arrayUnpackVisitor","ancestors","state","length","isIdentifier","isReferenced","deopt","DestructuringTransformer","constructor","opts","blockHoist","arrayRefSet","nodes","kind","iterableIsArray","arrayLikeIsIterable","objectRestNoSymbols","useBuiltIns","addHelper","Set","getExtendsHelper","memberExpression","identifier","buildVariableAssignment","id","init","op","isMemberExpression","expressionStatement","assignmentExpression","cloneNode","buildUndefinedNode","nodeInit","variableDeclaration","variableDeclarator","_blockHoist","buildVariableDeclaration","declar","push","_init","isObjectPattern","pushObjectPattern","isArrayPattern","pushArrayPattern","isAssignmentPattern","pushAssignmentPattern","toArray","count","has","left","right","valueRef","tempId","generateUidIdentifierBasedOnNode","tempConditional","conditionalExpression","binaryExpression","isPattern","patternId","generateUidIdentifier","pushObjectRest","objRef","spreadProp","spreadPropIndex","value","buildObjectExcludingKeys","slice","pushObjectProperty","propRef","isLiteral","key","computed","callExpression","isStatic","temp","copiedPattern","i","isPure","canUnpackArrayPattern","arr","isArrayExpression","isSpreadElement","isCallExpression","getBindingIdentifiers","traverse","e","pushUnpackedArrayPattern","holeToUndefined","el","arrayExpression","map","arrayRef","add","elemRef","numericLiteral","ref","memo","maybeGenerateMemoised","excludedKeys","allLiteral","hasTemplateLiteral","stringLiteral","isTemplateLiteral","String","isPrivateName","extendsHelper","objectExpression","sequenceExpression","keyExpression","isProgram","block","programScope","getProgramParent","convertVariableDeclaration","path","nodeKind","nodeLoc","loc","declarations","destructuring","inherits","tail","nodesOut","isVariableDeclaration","isExpressionStatement","expression","expr","arguments","isForStatement","parent","v","replaceWith","replaceWithMultiple","crawl","convertAssignmentExpression","parentPath","isSequenceExpression","isCompletionRecord","isArrowFunctionExpression","returnStatement","variableDeclarationHasPattern","declare","api","options","assertVersion","assumption","loose","allowArrayLike","visitor","ExportNamedDeclaration","declaration","specifiers","getOuterBindingIdentifiers","exportSpecifier","insertAfter","exportNamedDeclaration","ForXStatement","statementBody","CatchClause","param","AssignmentExpression","VariableDeclaration","isForXStatement","container"],"mappings":";;;;;;;AAKA,SAASA,UAAU,CAACC,IAAY,EAAE;EAChC,OACEC,UAAC,CAACC,iBAAiB,CAACF,IAAI,CAAC,IACzBA,IAAI,CAACG,QAAQ,KAAK,MAAM,IACxBF,UAAC,CAACG,SAAS,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAA;AAE9B,CAAA;AAEO,SAASC,wBAAwB,CACtCC,aAAwC,EACxCC,aAA4B,EAC5B;EACAD,aAAa,CAACE,WAAW,EAAE,CAAA;EAC3B,MAAM;IAAEC,KAAK;AAAEV,IAAAA,IAAAA;AAAK,GAAC,GAAGO,aAAa,CAAA;EACrC,MAAMI,iBAAiB,GAAGJ,aAAa,CAACK,GAAG,CAAC,MAAM,CAAC,CAACF,KAAK,CAACG,QAAQ,CAAA;AAClE,EAAA,MAAMC,8BAA8B,GAAGC,MAAM,CAACC,IAAI,CAACL,iBAAiB,CAAC,CAACM,IAAI,CACxEC,IAAI,IAAIR,KAAK,CAACS,UAAU,CAACD,IAAI,CAAC,CAC/B,CAAA;AAED,EAAA,IAAIJ,8BAA8B,EAAE;AAGlCd,IAAAA,IAAI,CAACoB,IAAI,GAAGnB,UAAC,CAACoB,cAAc,CAAC,CAAC,GAAGb,aAAa,EAAER,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAA;AAC7D,GAAC,MAAM;IACLpB,IAAI,CAACoB,IAAI,CAACA,IAAI,CAACE,OAAO,CAAC,GAAGd,aAAa,CAAC,CAAA;AAC1C,GAAA;AACF,CAAA;;AAMA,SAASe,YAAY,CAACC,OAAuB,EAAE;AAC7C,EAAA,OAAOA,OAAO,CAACC,QAAQ,CAACR,IAAI,CAACS,IAAI,IAAIzB,UAAC,CAAC0B,aAAa,CAACD,IAAI,CAAC,CAAC,CAAA;AAC7D,CAAA;;AAMA,SAASE,aAAa,CAACJ,OAAwB,EAAE;AAC/C,EAAA,OAAOA,OAAO,CAACK,UAAU,CAACZ,IAAI,CAACa,IAAI,IAAI7B,UAAC,CAAC0B,aAAa,CAACG,IAAI,CAAC,CAAC,CAAA;AAC/D,CAAA;AAMA,MAAMC,cAAc,GAAG,EAAE,CAAA;AAQzB,MAAMC,kBAAkB,GAAG,CACzBhC,IAAY,EACZiC,SAA6B,EAC7BC,KAA8B,KAC3B;AACH,EAAA,IAAI,CAACD,SAAS,CAACE,MAAM,EAAE;AAErB,IAAA,OAAA;AACF,GAAA;AAEA,EAAA,IACElC,UAAC,CAACmC,YAAY,CAACpC,IAAI,CAAC,IACpBC,UAAC,CAACoC,YAAY,CAACrC,IAAI,EAAEiC,SAAS,CAACA,SAAS,CAACE,MAAM,GAAG,CAAC,CAAC,CAACnC,IAAI,CAAC,IAC1DkC,KAAK,CAACrB,QAAQ,CAACb,IAAI,CAACkB,IAAI,CAAC,EACzB;IACAgB,KAAK,CAACI,KAAK,GAAG,IAAI,CAAA;AAClB,IAAA,MAAMP,cAAc,CAAA;AACtB,GAAA;AACF,CAAC,CAAA;AAmBM,MAAMQ,wBAAwB,CAAC;EAYpCC,WAAW,CAACC,IAAoC,EAAE;AAAA,IAAA,IAAA,CAX1CC,UAAU,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACVvC,QAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAChBwC,WAAW,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACHC,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLlC,KAAK,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACLmC,IAAI,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACJC,eAAe,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACfC,mBAAmB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACnBC,mBAAmB,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACnBC,WAAW,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACXC,SAAS,GAAA,KAAA,CAAA,CAAA;AAEf,IAAA,IAAI,CAACR,UAAU,GAAGD,IAAI,CAACC,UAAU,CAAA;AACjC,IAAA,IAAI,CAACvC,QAAQ,GAAGsC,IAAI,CAACtC,QAAQ,CAAA;AAC7B,IAAA,IAAI,CAACwC,WAAW,GAAG,IAAIQ,GAAG,EAAE,CAAA;AAC5B,IAAA,IAAI,CAACP,KAAK,GAAGH,IAAI,CAACG,KAAK,IAAI,EAAE,CAAA;AAC7B,IAAA,IAAI,CAAClC,KAAK,GAAG+B,IAAI,CAAC/B,KAAK,CAAA;AACvB,IAAA,IAAI,CAACmC,IAAI,GAAGJ,IAAI,CAACI,IAAI,CAAA;AACrB,IAAA,IAAI,CAACC,eAAe,GAAGL,IAAI,CAACK,eAAe,CAAA;AAC3C,IAAA,IAAI,CAACC,mBAAmB,GAAGN,IAAI,CAACM,mBAAmB,CAAA;AACnD,IAAA,IAAI,CAACC,mBAAmB,GAAGP,IAAI,CAACO,mBAAmB,CAAA;AACnD,IAAA,IAAI,CAACC,WAAW,GAAGR,IAAI,CAACQ,WAAW,CAAA;AACnC,IAAA,IAAI,CAACC,SAAS,GAAGT,IAAI,CAACS,SAAS,CAAA;AACjC,GAAA;AAEAE,EAAAA,gBAAgB,GAAG;AACjB,IAAA,OAAO,IAAI,CAACH,WAAW,GACnBhD,UAAC,CAACoD,gBAAgB,CAACpD,UAAC,CAACqD,UAAU,CAAC,QAAQ,CAAC,EAAErD,UAAC,CAACqD,UAAU,CAAC,QAAQ,CAAC,CAAC,GAClE,IAAI,CAACJ,SAAS,CAAC,SAAS,CAAC,CAAA;AAC/B,GAAA;AAEAK,EAAAA,uBAAuB,CACrBC,EAAkC,EAClCC,IAAkB,EAClB;AACA,IAAA,IAAIC,EAAE,GAAG,IAAI,CAACvD,QAAQ,CAAA;IACtB,IAAIF,UAAC,CAAC0D,kBAAkB,CAACH,EAAE,CAAC,EAAEE,EAAE,GAAG,GAAG,CAAA;AAEtC,IAAA,IAAI1D,IAAmD,CAAA;AAEvD,IAAA,IAAI0D,EAAE,EAAE;MACN1D,IAAI,GAAGC,UAAC,CAAC2D,mBAAmB,CAC1B3D,UAAC,CAAC4D,oBAAoB,CACpBH,EAAE,EACFF,EAAE,EACFvD,UAAC,CAAC6D,SAAS,CAACL,IAAI,CAAC,IAAI,IAAI,CAAC/C,KAAK,CAACqD,kBAAkB,EAAE,CACrD,CACF,CAAA;AACH,KAAC,MAAM;AACL,MAAA,IAAIC,QAAsB,CAAA;AAE1B,MAAA,IAAI,CAAC,IAAI,CAACnB,IAAI,KAAK,OAAO,IAAI,IAAI,CAACA,IAAI,KAAK,OAAO,KAAKY,IAAI,KAAK,IAAI,EAAE;AACrEO,QAAAA,QAAQ,GAAG,IAAI,CAACtD,KAAK,CAACqD,kBAAkB,EAAE,CAAA;AAC5C,OAAC,MAAM;AACLC,QAAAA,QAAQ,GAAG/D,UAAC,CAAC6D,SAAS,CAACL,IAAI,CAAC,CAAA;AAC9B,OAAA;AAEAzD,MAAAA,IAAI,GAAGC,UAAC,CAACgE,mBAAmB,CAAC,IAAI,CAACpB,IAAI,EAAE,CACtC5C,UAAC,CAACiE,kBAAkB,CAACV,EAAE,EAAEQ,QAAQ,CAAC,CACnC,CAAC,CAAA;AACJ,KAAA;;AAGAhE,IAAAA,IAAI,CAACmE,WAAW,GAAG,IAAI,CAACzB,UAAU,CAAA;AAElC,IAAA,OAAO1C,IAAI,CAAA;AACb,GAAA;AAEAoE,EAAAA,wBAAwB,CAACZ,EAAgB,EAAEC,IAAkB,EAAE;AAC7D,IAAA,MAAMY,MAAM,GAAGpE,UAAC,CAACgE,mBAAmB,CAAC,KAAK,EAAE,CAC1ChE,UAAC,CAACiE,kBAAkB,CAACjE,UAAC,CAAC6D,SAAS,CAACN,EAAE,CAAC,EAAEvD,UAAC,CAAC6D,SAAS,CAACL,IAAI,CAAC,CAAC,CACzD,CAAC,CAAA;AAEFY,IAAAA,MAAM,CAACF,WAAW,GAAG,IAAI,CAACzB,UAAU,CAAA;AACpC,IAAA,OAAO2B,MAAM,CAAA;AACf,GAAA;AAEAC,EAAAA,IAAI,CAACd,EAAU,EAAEe,KAA0B,EAAE;AAC3C,IAAA,MAAMd,IAAI,GAAGxD,UAAC,CAAC6D,SAAS,CAACS,KAAK,CAAC,CAAA;AAC/B,IAAA,IAAItE,UAAC,CAACuE,eAAe,CAAChB,EAAE,CAAC,EAAE;AACzB,MAAA,IAAI,CAACiB,iBAAiB,CAACjB,EAAE,EAAEC,IAAI,CAAC,CAAA;KACjC,MAAM,IAAIxD,UAAC,CAACyE,cAAc,CAAClB,EAAE,CAAC,EAAE;AAC/B,MAAA,IAAI,CAACmB,gBAAgB,CAACnB,EAAE,EAAEC,IAAI,CAAC,CAAA;KAChC,MAAM,IAAIxD,UAAC,CAAC2E,mBAAmB,CAACpB,EAAE,CAAC,EAAE;AACpC,MAAA,IAAI,CAACqB,qBAAqB,CAACrB,EAAE,EAAEC,IAAI,CAAC,CAAA;AACtC,KAAC,MAAM;AACL,MAAA,IAAI,CAACb,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACf,uBAAuB,CAACC,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAA;AACzD,KAAA;AACF,GAAA;AAEAqB,EAAAA,OAAO,CAAC9E,IAAkB,EAAE+E,KAAwB,EAAE;IACpD,IACE,IAAI,CAACjC,eAAe,IACnB7C,UAAC,CAACmC,YAAY,CAACpC,IAAI,CAAC,IAAI,IAAI,CAAC2C,WAAW,CAACqC,GAAG,CAAChF,IAAI,CAACkB,IAAI,CAAE,EACzD;AACA,MAAA,OAAOlB,IAAI,CAAA;AACb,KAAC,MAAM;AACL,MAAA,OAAO,IAAI,CAACU,KAAK,CAACoE,OAAO,CAAC9E,IAAI,EAAE+E,KAAK,EAAE,IAAI,CAAChC,mBAAmB,CAAC,CAAA;AAClE,KAAA;AACF,GAAA;AAEA8B,EAAAA,qBAAqB,CACnB;IAAEI,IAAI;AAAEC,IAAAA,KAAAA;GAA4B,EACpCC,QAA6B,EAC7B;AAKA,IAAA,IAAIpF,UAAU,CAACoF,QAAQ,CAAC,EAAE;AACxB,MAAA,IAAI,CAACb,IAAI,CAACW,IAAI,EAAEC,KAAK,CAAC,CAAA;AACtB,MAAA,OAAA;AACF,KAAA;;IAIA,MAAME,MAAM,GAAG,IAAI,CAAC1E,KAAK,CAAC2E,gCAAgC,CAACF,QAAQ,CAAC,CAAA;AAEpE,IAAA,IAAI,CAACvC,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACF,wBAAwB,CAACgB,MAAM,EAAED,QAAQ,CAAC,CAAC,CAAA;AAEhE,IAAA,MAAMG,eAAe,GAAGrF,UAAC,CAACsF,qBAAqB,CAC7CtF,UAAC,CAACuF,gBAAgB,CAChB,KAAK,EACLvF,UAAC,CAAC6D,SAAS,CAACsB,MAAM,CAAC,EACnB,IAAI,CAAC1E,KAAK,CAACqD,kBAAkB,EAAE,CAChC,EACDmB,KAAK,EACLjF,UAAC,CAAC6D,SAAS,CAACsB,MAAM,CAAC,CACpB,CAAA;AAED,IAAA,IAAInF,UAAC,CAACwF,SAAS,CAACR,IAAI,CAAC,EAAE;AACrB,MAAA,IAAIS,SAAS,CAAA;AACb,MAAA,IAAI1F,IAAI,CAAA;AAER,MAAA,IACE,IAAI,CAAC6C,IAAI,KAAK,OAAO,IACrB,IAAI,CAACA,IAAI,KAAK,KAAK,IACnB,IAAI,CAACA,IAAI,KAAK,OAAO,EACrB;QACA6C,SAAS,GAAG,IAAI,CAAChF,KAAK,CAACiF,qBAAqB,CAACP,MAAM,CAAClE,IAAI,CAAC,CAAA;QACzDlB,IAAI,GAAG,IAAI,CAACoE,wBAAwB,CAACsB,SAAS,EAAEJ,eAAe,CAAC,CAAA;AAClE,OAAC,MAAM;AACLI,QAAAA,SAAS,GAAGN,MAAM,CAAA;QAElBpF,IAAI,GAAGC,UAAC,CAAC2D,mBAAmB,CAC1B3D,UAAC,CAAC4D,oBAAoB,CAAC,GAAG,EAAE5D,UAAC,CAAC6D,SAAS,CAACsB,MAAM,CAAC,EAAEE,eAAe,CAAC,CAClE,CAAA;AACH,OAAA;AAEA,MAAA,IAAI,CAAC1C,KAAK,CAAC0B,IAAI,CAACtE,IAAI,CAAC,CAAA;AACrB,MAAA,IAAI,CAACsE,IAAI,CAACW,IAAI,EAAES,SAAS,CAAC,CAAA;AAC5B,KAAC,MAAM;AACL,MAAA,IAAI,CAAC9C,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACf,uBAAuB,CAAC0B,IAAI,EAAEK,eAAe,CAAC,CAAC,CAAA;AACtE,KAAA;AACF,GAAA;EAEAM,cAAc,CACZpE,OAAwB,EACxBqE,MAAoB,EACpBC,UAAyB,EACzBC,eAAuB,EACvB;AACA,IAAA,MAAMC,KAAK,GAAGC,wBAAwB,CACpCzE,OAAO,CAACK,UAAU,CAACqE,KAAK,CAAC,CAAC,EAAEH,eAAe,CAAC,EAC5CF,MAAM,EACN,IAAI,CAACnF,KAAK,EACVQ,IAAI,IAAI,IAAI,CAACgC,SAAS,CAAChC,IAAI,CAAC,EAC5B,IAAI,CAAC8B,mBAAmB,EACxB,IAAI,CAACC,WAAW,CACjB,CAAA;AACD,IAAA,IAAI,CAACL,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACf,uBAAuB,CAACuC,UAAU,CAACzF,QAAQ,EAAE2F,KAAK,CAAC,CAAC,CAAA;AAC3E,GAAA;AAEAG,EAAAA,kBAAkB,CAACrE,IAAsB,EAAEsE,OAAqB,EAAE;AAChE,IAAA,IAAInG,UAAC,CAACoG,SAAS,CAACvE,IAAI,CAACwE,GAAG,CAAC,EAAExE,IAAI,CAACyE,QAAQ,GAAG,IAAI,CAAA;AAE/C,IAAA,MAAM/E,OAAO,GAAGM,IAAI,CAACkE,KAAe,CAAA;IACpC,MAAMH,MAAM,GAAG5F,UAAC,CAACoD,gBAAgB,CAC/BpD,UAAC,CAAC6D,SAAS,CAACsC,OAAO,CAAC,EACpBtE,IAAI,CAACwE,GAAG,EACRxE,IAAI,CAACyE,QAAQ,CACd,CAAA;AAED,IAAA,IAAItG,UAAC,CAACwF,SAAS,CAACjE,OAAO,CAAC,EAAE;AACxB,MAAA,IAAI,CAAC8C,IAAI,CAAC9C,OAAO,EAAEqE,MAAM,CAAC,CAAA;AAC5B,KAAC,MAAM;AACL,MAAA,IAAI,CAACjD,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACf,uBAAuB,CAAC/B,OAAO,EAAEqE,MAAM,CAAC,CAAC,CAAA;AAChE,KAAA;AACF,GAAA;AAEApB,EAAAA,iBAAiB,CAACjD,OAAwB,EAAEqE,MAAoB,EAAE;;AAGhE,IAAA,IAAI,CAACrE,OAAO,CAACK,UAAU,CAACM,MAAM,EAAE;AAC9B,MAAA,IAAI,CAACS,KAAK,CAAC0B,IAAI,CACbrE,UAAC,CAAC2D,mBAAmB,CACnB3D,UAAC,CAACuG,cAAc,CACd,IAAI,CAACtD,SAAS,CAAC,0BAA0B,CAAC,EAC1CnD,UAAU,CAAC8F,MAAM,CAAC,GAAG,EAAE,GAAG,CAACA,MAAM,CAAC,CACnC,CACF,CACF,CAAA;AACD,MAAA,OAAA;AACF,KAAA;;AAMA,IAAA,IAAIrE,OAAO,CAACK,UAAU,CAACM,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACzB,KAAK,CAAC+F,QAAQ,CAACZ,MAAM,CAAC,EAAE;MACjE,MAAMa,IAAI,GAAG,IAAI,CAAChG,KAAK,CAAC2E,gCAAgC,CAACQ,MAAM,CAAC,CAAA;AAChE,MAAA,IAAI,CAACjD,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACF,wBAAwB,CAACsC,IAAI,EAAEb,MAAM,CAAC,CAAC,CAAA;AAC5DA,MAAAA,MAAM,GAAGa,IAAI,CAAA;AACf,KAAA;;AAGA,IAAA,IAAI9E,aAAa,CAACJ,OAAO,CAAC,EAAE;AAC1B,MAAA,IAAImF,aAA8B,CAAA;AAClC,MAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpF,OAAO,CAACK,UAAU,CAACM,MAAM,EAAEyE,CAAC,EAAE,EAAE;AAClD,QAAA,MAAM9E,IAAI,GAAGN,OAAO,CAACK,UAAU,CAAC+E,CAAC,CAAC,CAAA;AAClC,QAAA,IAAI3G,UAAC,CAAC0B,aAAa,CAACG,IAAI,CAAC,EAAE;AACzB,UAAA,MAAA;AACF,SAAA;AACA,QAAA,MAAMwE,GAAG,GAAGxE,IAAI,CAACwE,GAAG,CAAA;AACpB,QAAA,IAAIxE,IAAI,CAACyE,QAAQ,IAAI,CAAC,IAAI,CAAC7F,KAAK,CAACmG,MAAM,CAACP,GAAG,CAAC,EAAE;UAC5C,MAAMpF,IAAI,GAAG,IAAI,CAACR,KAAK,CAAC2E,gCAAgC,CAACiB,GAAG,CAAC,CAAA;UAC7D,IAAI,CAAC1D,KAAK,CAAC0B,IAAI;AAEb,UAAA,IAAI,CAACF,wBAAwB,CAAClD,IAAI,EAAEoF,GAAG,CAAC,CACzC,CAAA;UACD,IAAI,CAACK,aAAa,EAAE;YAClBA,aAAa,GAAGnF,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClBA,OAAO,EAAA;AACVK,cAAAA,UAAU,EAAEL,OAAO,CAACK,UAAU,CAACqE,KAAK,EAAA;aACrC,CAAA,CAAA;AACH,WAAA;AACAS,UAAAA,aAAa,CAAC9E,UAAU,CAAC+E,CAAC,CAAC,qBACtB9E,IAAI,EAAA;AACPwE,YAAAA,GAAG,EAAEpF,IAAAA;WACN,CAAA,CAAA;AACH,SAAA;AACF,OAAA;AACF,KAAA;AAEA,IAAA,KAAK,IAAI0F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpF,OAAO,CAACK,UAAU,CAACM,MAAM,EAAEyE,CAAC,EAAE,EAAE;AAClD,MAAA,MAAM9E,IAAI,GAAGN,OAAO,CAACK,UAAU,CAAC+E,CAAC,CAAC,CAAA;AAClC,MAAA,IAAI3G,UAAC,CAAC0B,aAAa,CAACG,IAAI,CAAC,EAAE;QACzB,IAAI,CAAC8D,cAAc,CAACpE,OAAO,EAAEqE,MAAM,EAAE/D,IAAI,EAAE8E,CAAC,CAAC,CAAA;AAC/C,OAAC,MAAM;AACL,QAAA,IAAI,CAACT,kBAAkB,CAACrE,IAAI,EAAE+D,MAAM,CAAC,CAAA;AACvC,OAAA;AACF,KAAA;AACF,GAAA;AAEAiB,EAAAA,qBAAqB,CACnBtF,OAAuB,EACvBuF,GAAiB,EACiB;IAElC,IAAI,CAAC9G,UAAC,CAAC+G,iBAAiB,CAACD,GAAG,CAAC,EAAE,OAAO,KAAK,CAAA;;IAI3C,IAAIvF,OAAO,CAACC,QAAQ,CAACU,MAAM,GAAG4E,GAAG,CAACtF,QAAQ,CAACU,MAAM,EAAE,OAAA;AACnD,IAAA,IACEX,OAAO,CAACC,QAAQ,CAACU,MAAM,GAAG4E,GAAG,CAACtF,QAAQ,CAACU,MAAM,IAC7C,CAACZ,YAAY,CAACC,OAAO,CAAC,EACtB;AACA,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AAEA,IAAA,KAAK,MAAME,IAAI,IAAIF,OAAO,CAACC,QAAQ,EAAE;AAEnC,MAAA,IAAI,CAACC,IAAI,EAAE,OAAO,KAAK,CAAA;;MAGvB,IAAIzB,UAAC,CAAC0D,kBAAkB,CAACjC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAA;AAC9C,KAAA;AAEA,IAAA,KAAK,MAAMA,IAAI,IAAIqF,GAAG,CAACtF,QAAQ,EAAE;MAE/B,IAAIxB,UAAC,CAACgH,eAAe,CAACvF,IAAI,CAAC,EAAE,OAAO,KAAK,CAAA;;MAGzC,IAAIzB,UAAC,CAACiH,gBAAgB,CAACxF,IAAI,CAAC,EAAE,OAAO,KAAK,CAAA;;MAG1C,IAAIzB,UAAC,CAAC0D,kBAAkB,CAACjC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAA;AAC9C,KAAA;;AAGA,IAAA,MAAMb,QAAQ,GAAGZ,UAAC,CAACkH,qBAAqB,CAAC3F,OAAO,CAAC,CAAA;AACjD,IAAA,MAAMU,KAA8B,GAAG;AAAEI,MAAAA,KAAK,EAAE,KAAK;AAAEzB,MAAAA,QAAAA;KAAU,CAAA;IAEjE,IAAI;MACFZ,UAAC,CAACmH,QAAQ,CAACL,GAAG,EAAE/E,kBAAkB,EAAEE,KAAK,CAAC,CAAA;KAC3C,CAAC,OAAOmF,CAAC,EAAE;AACV,MAAA,IAAIA,CAAC,KAAKtF,cAAc,EAAE,MAAMsF,CAAC,CAAA;AACnC,KAAA;IAEA,OAAO,CAACnF,KAAK,CAACI,KAAK,CAAA;AACrB,GAAA;AAEAgF,EAAAA,wBAAwB,CACtB9F,OAAuB,EACvBuF,GAA8B,EAC9B;AACA,IAAA,MAAMQ,eAAe,GAAIC,EAAgB,IACvCA,EAAE,IAAA,IAAA,GAAFA,EAAE,GAAI,IAAI,CAAC9G,KAAK,CAACqD,kBAAkB,EAAE,CAAA;AAEvC,IAAA,KAAK,IAAI6C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpF,OAAO,CAACC,QAAQ,CAACU,MAAM,EAAEyE,CAAC,EAAE,EAAE;AAChD,MAAA,MAAMlF,IAAI,GAAGF,OAAO,CAACC,QAAQ,CAACmF,CAAC,CAAC,CAAA;AAChC,MAAA,IAAI3G,UAAC,CAAC0B,aAAa,CAACD,IAAI,CAAC,EAAE;QACzB,IAAI,CAAC4C,IAAI,CACP5C,IAAI,CAACrB,QAAQ,EACbJ,UAAC,CAACwH,eAAe,CAACV,GAAG,CAACtF,QAAQ,CAACyE,KAAK,CAACU,CAAC,CAAC,CAACc,GAAG,CAACH,eAAe,CAAC,CAAC,CAC9D,CAAA;AACH,OAAC,MAAM;AACL,QAAA,IAAI,CAACjD,IAAI,CAAC5C,IAAI,EAAE6F,eAAe,CAACR,GAAG,CAACtF,QAAQ,CAACmF,CAAC,CAAC,CAAC,CAAC,CAAA;AACnD,OAAA;AACF,KAAA;AACF,GAAA;AAEAjC,EAAAA,gBAAgB,CAACnD,OAAuB,EAAEmG,QAA6B,EAAE;IACvE,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACrB,IAAI,CAAC/E,KAAK,CAAC0B,IAAI,CACbrE,UAAC,CAAC2D,mBAAmB,CACnB3D,UAAC,CAACuG,cAAc,CAAC,IAAI,CAACtD,SAAS,CAAC,0BAA0B,CAAC,EAAE,EAAE,CAAC,CACjE,CACF,CAAA;AACD,MAAA,OAAA;AACF,KAAA;AACA,IAAA,IAAI,CAAC1B,OAAO,CAACC,QAAQ,EAAE,OAAA;;IASvB,IAAI,IAAI,CAACqF,qBAAqB,CAACtF,OAAO,EAAEmG,QAAQ,CAAC,EAAE;AACjD,MAAA,OAAO,IAAI,CAACL,wBAAwB,CAAC9F,OAAO,EAAEmG,QAAQ,CAAC,CAAA;AACzD,KAAA;;AAKA,IAAA,MAAM5C,KAAK,GAAG,CAACxD,YAAY,CAACC,OAAO,CAAC,IAAIA,OAAO,CAACC,QAAQ,CAACU,MAAM,CAAA;;IAM/D,MAAM2C,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC6C,QAAQ,EAAE5C,KAAK,CAAC,CAAA;AAE7C,IAAA,IAAI9E,UAAC,CAACmC,YAAY,CAAC0C,OAAO,CAAC,EAAE;AAG3B6C,MAAAA,QAAQ,GAAG7C,OAAO,CAAA;AACpB,KAAC,MAAM;MACL6C,QAAQ,GAAG,IAAI,CAACjH,KAAK,CAAC2E,gCAAgC,CAACsC,QAAQ,CAAC,CAAA;MAChE,IAAI,CAAChF,WAAW,CAACiF,GAAG,CAACD,QAAQ,CAACzG,IAAI,CAAC,CAAA;AACnC,MAAA,IAAI,CAAC0B,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACF,wBAAwB,CAACuD,QAAQ,EAAE7C,OAAO,CAAC,CAAC,CAAA;AACnE,KAAA;AAEA,IAAA,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpF,OAAO,CAACC,QAAQ,CAACU,MAAM,EAAEyE,CAAC,EAAE,EAAE;AAChD,MAAA,MAAMlF,IAAI,GAAGF,OAAO,CAACC,QAAQ,CAACmF,CAAC,CAAC,CAAA;;MAGhC,IAAI,CAAClF,IAAI,EAAE,SAAA;AAEX,MAAA,IAAImG,OAAO,CAAA;AAEX,MAAA,IAAI5H,UAAC,CAAC0B,aAAa,CAACD,IAAI,CAAC,EAAE;AACzBmG,QAAAA,OAAO,GAAG,IAAI,CAAC/C,OAAO,CAAC6C,QAAQ,CAAC,CAAA;QAChCE,OAAO,GAAG5H,UAAC,CAACuG,cAAc,CACxBvG,UAAC,CAACoD,gBAAgB,CAACwE,OAAO,EAAE5H,UAAC,CAACqD,UAAU,CAAC,OAAO,CAAC,CAAC,EAClD,CAACrD,UAAC,CAAC6H,cAAc,CAAClB,CAAC,CAAC,CAAC,CACtB,CAAA;;QAID,IAAI,CAACtC,IAAI,CAAC5C,IAAI,CAACrB,QAAQ,EAAEwH,OAAO,CAAC,CAAA;AACnC,OAAC,MAAM;AACLA,QAAAA,OAAO,GAAG5H,UAAC,CAACoD,gBAAgB,CAACsE,QAAQ,EAAE1H,UAAC,CAAC6H,cAAc,CAAClB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;AACjE,QAAA,IAAI,CAACtC,IAAI,CAAC5C,IAAI,EAAEmG,OAAO,CAAC,CAAA;AAC1B,OAAA;AACF,KAAA;AACF,GAAA;AAEApE,EAAAA,IAAI,CAACjC,OAAe,EAAEuG,GAAiB,EAAE;;AAIvC,IAAA,IAAI,CAAC9H,UAAC,CAAC+G,iBAAiB,CAACe,GAAG,CAAC,IAAI,CAAC9H,UAAC,CAAC0D,kBAAkB,CAACoE,GAAG,CAAC,EAAE;MAC3D,MAAMC,IAAI,GAAG,IAAI,CAACtH,KAAK,CAACuH,qBAAqB,CAACF,GAAG,EAAE,IAAI,CAAC,CAAA;AACxD,MAAA,IAAIC,IAAI,EAAE;AACR,QAAA,IAAI,CAACpF,KAAK,CAAC0B,IAAI,CAAC,IAAI,CAACF,wBAAwB,CAAC4D,IAAI,EAAE/H,UAAC,CAAC6D,SAAS,CAACiE,GAAG,CAAC,CAAC,CAAC,CAAA;AACtEA,QAAAA,GAAG,GAAGC,IAAI,CAAA;AACZ,OAAA;AACF,KAAA;AAEA,IAAA,IAAI,CAAC1D,IAAI,CAAC9C,OAAO,EAAEuG,GAAG,CAAC,CAAA;IAEvB,OAAO,IAAI,CAACnF,KAAK,CAAA;AACnB,GAAA;AACF,CAAA;AAOO,SAASqD,wBAAwB,CACtCiC,YAAiB,EACjBrC,MAAoB,EACpBnF,KAAY,EACZwC,SAA4B,EAC5BF,mBAA4B,EAC5BC,WAAoB,EACF;;EAGlB,MAAMjC,IAAI,GAAG,EAAE,CAAA;EACf,IAAImH,UAAU,GAAG,IAAI,CAAA;EACrB,IAAIC,kBAAkB,GAAG,KAAK,CAAA;AAC9B,EAAA,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,YAAY,CAAC/F,MAAM,EAAEyE,CAAC,EAAE,EAAE;AAC5C,IAAA,MAAM9E,IAAI,GAAGoG,YAAY,CAACtB,CAAC,CAAC,CAAA;AAC5B,IAAA,MAAMN,GAAG,GAAGxE,IAAI,CAACwE,GAAG,CAAA;IACpB,IAAIrG,UAAC,CAACmC,YAAY,CAACkE,GAAG,CAAC,IAAI,CAACxE,IAAI,CAACyE,QAAQ,EAAE;MACzCvF,IAAI,CAACsD,IAAI,CAACrE,UAAC,CAACoI,aAAa,CAAC/B,GAAG,CAACpF,IAAI,CAAC,CAAC,CAAA;KACrC,MAAM,IAAIjB,UAAC,CAACqI,iBAAiB,CAAChC,GAAG,CAAC,EAAE;MACnCtF,IAAI,CAACsD,IAAI,CAACrE,UAAC,CAAC6D,SAAS,CAACwC,GAAG,CAAC,CAAC,CAAA;AAC3B8B,MAAAA,kBAAkB,GAAG,IAAI,CAAA;KAC1B,MAAM,IAAInI,UAAC,CAACoG,SAAS,CAACC,GAAG,CAAC,EAAE;AAE3BtF,MAAAA,IAAI,CAACsD,IAAI,CAACrE,UAAC,CAACoI,aAAa,CAACE,MAAM,CAACjC,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,CAAA;KAC9C,MAAM,IAAI/F,UAAC,CAACuI,aAAa,CAAClC,GAAG,CAAC,EAAE,CAEhC,MAAM;MACLtF,IAAI,CAACsD,IAAI,CAACrE,UAAC,CAAC6D,SAAS,CAACwC,GAAG,CAAC,CAAC,CAAA;AAC3B6B,MAAAA,UAAU,GAAG,KAAK,CAAA;AACpB,KAAA;AACF,GAAA;AAEA,EAAA,IAAInC,KAAK,CAAA;AACT,EAAA,IAAIhF,IAAI,CAACmB,MAAM,KAAK,CAAC,EAAE;IACrB,MAAMsG,aAAa,GAAGxF,WAAW,GAC7BhD,UAAC,CAACoD,gBAAgB,CAACpD,UAAC,CAACqD,UAAU,CAAC,QAAQ,CAAC,EAAErD,UAAC,CAACqD,UAAU,CAAC,QAAQ,CAAC,CAAC,GAClEJ,SAAS,CAAC,SAAS,CAAC,CAAA;IACxB8C,KAAK,GAAG/F,UAAC,CAACuG,cAAc,CAACiC,aAAa,EAAE,CACtCxI,UAAC,CAACyI,gBAAgB,CAAC,EAAE,CAAC,EACtBzI,UAAC,CAAC0I,kBAAkB,CAAC,CACnB1I,UAAC,CAACuG,cAAc,CAACtD,SAAS,CAAC,0BAA0B,CAAC,EAAE,CACtDjD,UAAC,CAAC6D,SAAS,CAAC+B,MAAM,CAAC,CACpB,CAAC,EACF5F,UAAC,CAAC6D,SAAS,CAAC+B,MAAM,CAAC,CACpB,CAAC,CACH,CAAC,CAAA;AACJ,GAAC,MAAM;AACL,IAAA,IAAI+C,aAA2B,GAAG3I,UAAC,CAACwH,eAAe,CAACzG,IAAI,CAAC,CAAA;IAEzD,IAAI,CAACmH,UAAU,EAAE;MACfS,aAAa,GAAG3I,UAAC,CAACuG,cAAc,CAC9BvG,UAAC,CAACoD,gBAAgB,CAACuF,aAAa,EAAE3I,UAAC,CAACqD,UAAU,CAAC,KAAK,CAAC,CAAC,EACtD,CAACJ,SAAS,CAAC,eAAe,CAAC,CAAC,CAC7B,CAAA;AACH,KAAC,MAAM,IAAI,CAACkF,kBAAkB,IAAI,CAACnI,UAAC,CAAC4I,SAAS,CAACnI,KAAK,CAACoI,KAAK,CAAC,EAAE;AAE3D,MAAA,MAAMC,YAAY,GAAGrI,KAAK,CAACsI,gBAAgB,EAAE,CAAA;AAC7C,MAAA,MAAMxF,EAAE,GAAGuF,YAAY,CAACpD,qBAAqB,CAAC,UAAU,CAAC,CAAA;MAEzDoD,YAAY,CAACzE,IAAI,CAAC;QAChBd,EAAE;AACFC,QAAAA,IAAI,EAAEmF,aAAa;AACnB/F,QAAAA,IAAI,EAAE,OAAA;AACR,OAAC,CAAC,CAAA;AAEF+F,MAAAA,aAAa,GAAG3I,UAAC,CAAC6D,SAAS,CAACN,EAAE,CAAC,CAAA;AACjC,KAAA;IAEAwC,KAAK,GAAG/F,UAAC,CAACuG,cAAc,CACtBtD,SAAS,CAAE,CAAyBF,uBAAAA,EAAAA,mBAAmB,GAAG,OAAO,GAAG,EAAG,EAAC,CAAC,EACzE,CAAC/C,UAAC,CAAC6D,SAAS,CAAC+B,MAAM,CAAC,EAAE+C,aAAa,CAAC,CACrC,CAAA;AACH,GAAA;AACA,EAAA,OAAO5C,KAAK,CAAA;AACd,CAAA;AAEO,SAASiD,0BAA0B,CACxCC,IAAqC,EACrChG,SAA4B,EAC5BH,mBAA4B,EAC5BD,eAAwB,EACxBE,mBAA4B,EAC5BC,WAAoB,EACpB;EACA,MAAM;IAAEjD,IAAI;AAAEU,IAAAA,KAAAA;AAAM,GAAC,GAAGwI,IAAI,CAAA;AAE5B,EAAA,MAAMC,QAAQ,GAAGnJ,IAAI,CAAC6C,IAAI,CAAA;AAC1B,EAAA,MAAMuG,OAAO,GAAGpJ,IAAI,CAACqJ,GAAG,CAAA;EACxB,MAAMzG,KAAK,GAAG,EAAE,CAAA;AAEhB,EAAA,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5G,IAAI,CAACsJ,YAAY,CAACnH,MAAM,EAAEyE,CAAC,EAAE,EAAE;AACjD,IAAA,MAAMvC,MAAM,GAAGrE,IAAI,CAACsJ,YAAY,CAAC1C,CAAC,CAAC,CAAA;AAEnC,IAAA,MAAMlB,SAAS,GAAGrB,MAAM,CAACZ,IAAI,CAAA;AAC7B,IAAA,MAAMjC,OAAO,GAAG6C,MAAM,CAACb,EAAE,CAAA;AAEzB,IAAA,MAAM+F,aAAuC,GAC3C,IAAIhH,wBAAwB,CAAC;MAE3BG,UAAU,EAAE1C,IAAI,CAACmE,WAAW;AAC5BvB,MAAAA,KAAK,EAAEA,KAAK;AACZlC,MAAAA,KAAK,EAAEA,KAAK;MACZmC,IAAI,EAAE7C,IAAI,CAAC6C,IAAI;MACfC,eAAe;MACfC,mBAAmB;MACnBE,WAAW;MACXD,mBAAmB;AACnBE,MAAAA,SAAAA;AACF,KAAC,CAAC,CAAA;AAEJ,IAAA,IAAIjD,UAAC,CAACwF,SAAS,CAACjE,OAAO,CAAC,EAAE;AACxB+H,MAAAA,aAAa,CAAC9F,IAAI,CAACjC,OAAO,EAAEkE,SAAS,CAAC,CAAA;MAEtC,IAAI,CAACkB,CAAC,KAAK5G,IAAI,CAACsJ,YAAY,CAACnH,MAAM,GAAG,CAAC,EAAE;AAGvClC,QAAAA,UAAC,CAACuJ,QAAQ,CAAC5G,KAAK,CAACA,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC,EAAEkC,MAAM,CAAC,CAAA;AAC7C,OAAA;AACF,KAAC,MAAM;AACLzB,MAAAA,KAAK,CAAC0B,IAAI,CACRrE,UAAC,CAACuJ,QAAQ,CACRD,aAAa,CAAChG,uBAAuB,CAAC/B,OAAO,EAAEkE,SAAS,CAAC,EACzDrB,MAAM,CACP,CACF,CAAA;AACH,KAAA;AACF,GAAA;EAEA,IAAIoF,IAAkC,GAAG,IAAI,CAAA;EAC7C,IAAIC,QAAQ,GAAG,EAAE,CAAA;AACjB,EAAA,KAAK,MAAM1J,IAAI,IAAI4C,KAAK,EAAE;AACxB,IAAA,IAAI3C,UAAC,CAAC0J,qBAAqB,CAAC3J,IAAI,CAAC,EAAE;MACjC,IAAIyJ,IAAI,KAAK,IAAI,EAAE;QAEjBA,IAAI,CAACH,YAAY,CAAChF,IAAI,CAAC,GAAGtE,IAAI,CAACsJ,YAAY,CAAC,CAAA;AAC5C,QAAA,SAAA;AACF,OAAC,MAAM;QAELtJ,IAAI,CAAC6C,IAAI,GAAGsG,QAAQ,CAAA;AACpBM,QAAAA,IAAI,GAAGzJ,IAAI,CAAA;AACb,OAAA;AACF,KAAC,MAAM;AACLyJ,MAAAA,IAAI,GAAG,IAAI,CAAA;AACb,KAAA;AAEA,IAAA,IAAI,CAACzJ,IAAI,CAACqJ,GAAG,EAAE;MACbrJ,IAAI,CAACqJ,GAAG,GAAGD,OAAO,CAAA;AACpB,KAAA;AACAM,IAAAA,QAAQ,CAACpF,IAAI,CAACtE,IAAI,CAAC,CAAA;AACrB,GAAA;EAEA,IACE0J,QAAQ,CAACvH,MAAM,KAAK,CAAC,IACrBlC,UAAC,CAAC0J,qBAAqB,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC,IACpCzJ,UAAC,CAAC2J,qBAAqB,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,IACpCzJ,UAAC,CAACiH,gBAAgB,CAACwC,QAAQ,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC,IAC1CH,QAAQ,CAAC,CAAC,CAAC,CAACJ,YAAY,CAACnH,MAAM,KAAK,CAAC,EACrC;AAOA,IAAA,MAAM2H,IAAI,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAACG,UAAU,CAAA;AACnCC,IAAAA,IAAI,CAACC,SAAS,GAAG,CAACL,QAAQ,CAAC,CAAC,CAAC,CAACJ,YAAY,CAAC,CAAC,CAAC,CAAC7F,IAAI,CAAC,CAAA;IACnDiG,QAAQ,GAAG,CAACI,IAAI,CAAC,CAAA;AACnB,GAAC,MAAM;AAEL,IAAA,IACE7J,UAAC,CAAC+J,cAAc,CAACd,IAAI,CAACe,MAAM,EAAE;AAAExG,MAAAA,IAAI,EAAEzD,IAAAA;AAAK,KAAC,CAAC,IAC7C,CAAC0J,QAAQ,CAACzI,IAAI,CAACiJ,CAAC,IAAIjK,UAAC,CAAC0J,qBAAqB,CAACO,CAAC,CAAC,CAAC,EAC/C;AACA,MAAA,KAAK,IAAItD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,QAAQ,CAACvH,MAAM,EAAEyE,CAAC,EAAE,EAAE;AACxC,QAAA,MAAM5G,IAAY,GAAG0J,QAAQ,CAAC9C,CAAC,CAAC,CAAA;AAChC,QAAA,IAAI3G,UAAC,CAAC2J,qBAAqB,CAAC5J,IAAI,CAAC,EAAE;AACjC0J,UAAAA,QAAQ,CAAC9C,CAAC,CAAC,GAAG5G,IAAI,CAAC6J,UAAU,CAAA;AAC/B,SAAA;AACF,OAAA;AACF,KAAA;AACF,GAAA;AAEA,EAAA,IAAIH,QAAQ,CAACvH,MAAM,KAAK,CAAC,EAAE;AACzB+G,IAAAA,IAAI,CAACiB,WAAW,CAACT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/B,GAAC,MAAM;AACLR,IAAAA,IAAI,CAACkB,mBAAmB,CAACV,QAAQ,CAAC,CAAA;AACpC,GAAA;EACAhJ,KAAK,CAAC2J,KAAK,EAAE,CAAA;AACf,CAAA;AAEO,SAASC,2BAA2B,CACzCpB,IAAsC,EACtChG,SAA4B,EAC5BH,mBAA4B,EAC5BD,eAAwB,EACxBE,mBAA4B,EAC5BC,WAAoB,EACpB;EACA,MAAM;IAAEjD,IAAI;IAAEU,KAAK;AAAE6J,IAAAA,UAAAA;AAAW,GAAC,GAAGrB,IAAI,CAAA;EAExC,MAAMtG,KAAqC,GAAG,EAAE,CAAA;AAEhD,EAAA,MAAM2G,aAAa,GAAG,IAAIhH,wBAAwB,CAAC;IACjDpC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;AACvBO,IAAAA,KAAK,EAAEA,KAAK;AACZkC,IAAAA,KAAK,EAAEA,KAAK;IACZG,mBAAmB;IACnBD,eAAe;IACfE,mBAAmB;IACnBC,WAAW;AACXC,IAAAA,SAAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,IAAI6E,GAAwB,CAAA;AAC5B,EAAA,IACG,CAACwC,UAAU,CAACX,qBAAqB,EAAE,IAClC,CAACW,UAAU,CAACC,oBAAoB,EAAE,IACpCtB,IAAI,CAACuB,kBAAkB,EAAE,EACzB;IACA1C,GAAG,GAAGrH,KAAK,CAAC2E,gCAAgC,CAACrF,IAAI,CAACkF,KAAK,EAAE,KAAK,CAAC,CAAA;IAE/DtC,KAAK,CAAC0B,IAAI,CACRrE,UAAC,CAACgE,mBAAmB,CAAC,KAAK,EAAE,CAAChE,UAAC,CAACiE,kBAAkB,CAAC6D,GAAG,EAAE/H,IAAI,CAACkF,KAAK,CAAC,CAAC,CAAC,CACtE,CAAA;IAED,IAAIjF,UAAC,CAAC+G,iBAAiB,CAAChH,IAAI,CAACkF,KAAK,CAAC,EAAE;MACnCqE,aAAa,CAAC5G,WAAW,CAACiF,GAAG,CAACG,GAAG,CAAC7G,IAAI,CAAC,CAAA;AACzC,KAAA;AACF,GAAA;AAEAqI,EAAAA,aAAa,CAAC9F,IAAI,CAACzD,IAAI,CAACiF,IAAI,EAAE8C,GAAG,IAAI/H,IAAI,CAACkF,KAAK,CAAC,CAAA;AAEhD,EAAA,IAAI6C,GAAG,EAAE;AACP,IAAA,IAAIwC,UAAU,CAACG,yBAAyB,EAAE,EAAE;MAC1CxB,IAAI,CAACiB,WAAW,CAAClK,UAAC,CAACoB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAA;AACtCuB,MAAAA,KAAK,CAAC0B,IAAI,CAACrE,UAAC,CAAC0K,eAAe,CAAC1K,UAAC,CAAC6D,SAAS,CAACiE,GAAG,CAAC,CAAC,CAAC,CAAA;AACjD,KAAC,MAAM;AACLnF,MAAAA,KAAK,CAAC0B,IAAI,CAACrE,UAAC,CAAC2D,mBAAmB,CAAC3D,UAAC,CAAC6D,SAAS,CAACiE,GAAG,CAAC,CAAC,CAAC,CAAA;AACrD,KAAA;AACF,GAAA;AAEAmB,EAAAA,IAAI,CAACkB,mBAAmB,CAACxH,KAAK,CAAC,CAAA;EAC/BlC,KAAK,CAAC2J,KAAK,EAAE,CAAA;AACf;;ACpuBA,SAASO,6BAA6B,CAAC5K,IAA2B,EAAE;AAClE,EAAA,KAAK,MAAMqE,MAAM,IAAIrE,IAAI,CAACsJ,YAAY,EAAE;IACtC,IAAIrJ,UAAC,CAACwF,SAAS,CAACpB,MAAM,CAACb,EAAE,CAAC,EAAE;AAC1B,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACF,GAAA;AACA,EAAA,OAAO,KAAK,CAAA;AACd,CAAA;AAQA,YAAeqH,yBAAO,CAAC,CAACC,GAAG,EAAEC,OAAgB,KAAK;AAAA,EAAA,IAAA,IAAA,EAAA,eAAA,EAAA,KAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,gBAAA,CAAA;AAChDD,EAAAA,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC,CAAA;EAEpB,MAAM;AAAE/H,IAAAA,WAAW,GAAG,KAAA;AAAM,GAAC,GAAG8H,OAAO,CAAA;AAEvC,EAAA,MAAMjI,eAAe,GAAA,CAAA,IAAA,GAAA,CAAA,eAAA,GACnBgI,GAAG,CAACG,UAAU,CAAC,iBAAiB,CAAC,KAAIF,IAAAA,GAAAA,eAAAA,GAAAA,OAAO,CAACG,KAAK,mBAAI,KAAK,CAAA;AAC7D,EAAA,MAAMnI,mBAAmB,GAAA,CAAA,KAAA,GAAA,CAAA,qBAAA,GACvBgI,OAAO,CAACI,cAAc,KAAA,IAAA,GAAA,qBAAA,GAAIL,GAAG,CAACG,UAAU,CAAC,qBAAqB,CAAC,oBAAI,KAAK,CAAA;AAC1E,EAAA,MAAMjI,mBAAmB,GAAA,CAAA,KAAA,GAAA,CAAA,gBAAA,GACvB8H,GAAG,CAACG,UAAU,CAAC,qBAAqB,CAAC,KAAIF,IAAAA,GAAAA,gBAAAA,GAAAA,OAAO,CAACG,KAAK,oBAAI,KAAK,CAAA;EAEjE,OAAO;AACLhK,IAAAA,IAAI,EAAE,yBAAyB;AAE/BkK,IAAAA,OAAO,EAAE;MACPC,sBAAsB,CAACnC,IAAI,EAAE;AAC3B,QAAA,MAAMoC,WAAW,GAAGpC,IAAI,CAACtI,GAAG,CAAC,aAAa,CAAC,CAAA;AAC3C,QAAA,IAAI,CAAC0K,WAAW,CAAC3B,qBAAqB,EAAE,EAAE,OAAA;AAC1C,QAAA,IAAI,CAACiB,6BAA6B,CAACU,WAAW,CAACtL,IAAI,CAAC,EAAE,OAAA;QAEtD,MAAMuL,UAAU,GAAG,EAAE,CAAA;AAErB,QAAA,KAAK,MAAMrK,IAAI,IAAIH,MAAM,CAACC,IAAI,CAACkI,IAAI,CAACsC,0BAA0B,EAAE,CAAC,EAAE;UACjED,UAAU,CAACjH,IAAI,CACbrE,UAAC,CAACwL,eAAe,CAACxL,UAAC,CAACqD,UAAU,CAACpC,IAAI,CAAC,EAAEjB,UAAC,CAACqD,UAAU,CAACpC,IAAI,CAAC,CAAC,CAC1D,CAAA;AACH,SAAA;;AAKAgI,QAAAA,IAAI,CAACiB,WAAW,CAACmB,WAAW,CAACtL,IAAI,CAAC,CAAA;QAClCkJ,IAAI,CAACwC,WAAW,CAACzL,UAAC,CAAC0L,sBAAsB,CAAC,IAAI,EAAEJ,UAAU,CAAC,CAAC,CAAA;AAC5DrC,QAAAA,IAAI,CAACxI,KAAK,CAAC2J,KAAK,EAAE,CAAA;OACnB;MAEDuB,aAAa,CAAC1C,IAA+B,EAAE;QAC7C,MAAM;UAAElJ,IAAI;AAAEU,UAAAA,KAAAA;AAAM,SAAC,GAAGwI,IAAI,CAAA;AAC5B,QAAA,MAAMjE,IAAI,GAAGjF,IAAI,CAACiF,IAAI,CAAA;AAEtB,QAAA,IAAIhF,UAAC,CAACwF,SAAS,CAACR,IAAI,CAAC,EAAE;;AAGrB,UAAA,MAAMyB,IAAI,GAAGhG,KAAK,CAACiF,qBAAqB,CAAC,KAAK,CAAC,CAAA;AAE/C3F,UAAAA,IAAI,CAACiF,IAAI,GAAGhF,UAAC,CAACgE,mBAAmB,CAAC,KAAK,EAAE,CACvChE,UAAC,CAACiE,kBAAkB,CAACwC,IAAI,CAAC,CAC3B,CAAC,CAAA;UAEFwC,IAAI,CAACzI,WAAW,EAAE,CAAA;UAClB,MAAMoL,aAAa,GAAG3C,IAAI,CAAClJ,IAAI,CAACoB,IAAI,CAACA,IAAI,CAAA;UACzC,MAAMwB,KAAK,GAAG,EAAE,CAAA;UAKhB,IAAIiJ,aAAa,CAAC1J,MAAM,KAAK,CAAC,IAAI+G,IAAI,CAACuB,kBAAkB,EAAE,EAAE;AAC3D7H,YAAAA,KAAK,CAACtB,OAAO,CAACrB,UAAC,CAAC2D,mBAAmB,CAAClD,KAAK,CAACqD,kBAAkB,EAAE,CAAC,CAAC,CAAA;AAClE,WAAA;UAEAnB,KAAK,CAACtB,OAAO,CACXrB,UAAC,CAAC2D,mBAAmB,CACnB3D,UAAC,CAAC4D,oBAAoB,CAAC,GAAG,EAAEoB,IAAI,EAAEhF,UAAC,CAAC6D,SAAS,CAAC4C,IAAI,CAAC,CAAC,CACrD,CACF,CAAA;AAEDpG,UAAAA,wBAAwB,CAAC4I,IAAI,EAAEtG,KAAK,CAAC,CAAA;UACrClC,KAAK,CAAC2J,KAAK,EAAE,CAAA;AACb,UAAA,OAAA;AACF,SAAA;AAEA,QAAA,IAAI,CAACpK,UAAC,CAAC0J,qBAAqB,CAAC1E,IAAI,CAAC,EAAE,OAAA;QAEpC,MAAMzD,OAAO,GAAGyD,IAAI,CAACqE,YAAY,CAAC,CAAC,CAAC,CAAC9F,EAAE,CAAA;AACvC,QAAA,IAAI,CAACvD,UAAC,CAACwF,SAAS,CAACjE,OAAO,CAAC,EAAE,OAAA;AAE3B,QAAA,MAAM8E,GAAG,GAAG5F,KAAK,CAACiF,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAC9C3F,IAAI,CAACiF,IAAI,GAAGhF,UAAC,CAACgE,mBAAmB,CAACgB,IAAI,CAACpC,IAAI,EAAE,CAC3C5C,UAAC,CAACiE,kBAAkB,CAACoC,GAAG,EAAE,IAAI,CAAC,CAChC,CAAC,CAAA;QAEF,MAAM1D,KAAqC,GAAG,EAAE,CAAA;AAEhD,QAAA,MAAM2G,aAAa,GAAG,IAAIhH,wBAAwB,CAAC;UACjDM,IAAI,EAAEoC,IAAI,CAACpC,IAAI;AACfnC,UAAAA,KAAK,EAAEA,KAAK;AACZkC,UAAAA,KAAK,EAAEA,KAAK;UACZG,mBAAmB;UACnBD,eAAe;UACfE,mBAAmB;UACnBC,WAAW;AACXC,UAAAA,SAAS,EAAEhC,IAAI,IAAI,IAAI,CAACgC,SAAS,CAAChC,IAAI,CAAA;AACxC,SAAC,CAAC,CAAA;AAEFqI,QAAAA,aAAa,CAAC9F,IAAI,CAACjC,OAAO,EAAE8E,GAAG,CAAC,CAAA;AAEhChG,QAAAA,wBAAwB,CAAC4I,IAAI,EAAEtG,KAAK,CAAC,CAAA;QACrClC,KAAK,CAAC2J,KAAK,EAAE,CAAA;OACd;AAEDyB,MAAAA,WAAW,CAAC;QAAE9L,IAAI;AAAEU,QAAAA,KAAAA;AAAM,OAAC,EAAE;AAC3B,QAAA,MAAMc,OAAO,GAAGxB,IAAI,CAAC+L,KAAK,CAAA;AAC1B,QAAA,IAAI,CAAC9L,UAAC,CAACwF,SAAS,CAACjE,OAAO,CAAC,EAAE,OAAA;AAE3B,QAAA,MAAMuG,GAAG,GAAGrH,KAAK,CAACiF,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAC9C3F,IAAI,CAAC+L,KAAK,GAAGhE,GAAG,CAAA;QAEhB,MAAMnF,KAAqC,GAAG,EAAE,CAAA;AAEhD,QAAA,MAAM2G,aAAa,GAAG,IAAIhH,wBAAwB,CAAC;AACjDM,UAAAA,IAAI,EAAE,KAAK;AACXnC,UAAAA,KAAK,EAAEA,KAAK;AACZkC,UAAAA,KAAK,EAAEA,KAAK;UACZG,mBAAmB;UACnBD,eAAe;UACfE,mBAAmB;UACnBC,WAAW;AACXC,UAAAA,SAAS,EAAEhC,IAAI,IAAI,IAAI,CAACgC,SAAS,CAAChC,IAAI,CAAA;AACxC,SAAC,CAAC,CAAA;AACFqI,QAAAA,aAAa,CAAC9F,IAAI,CAACjC,OAAO,EAAEuG,GAAG,CAAC,CAAA;AAEhC/H,QAAAA,IAAI,CAACoB,IAAI,CAACA,IAAI,GAAG,CAAC,GAAGwB,KAAK,EAAE,GAAG5C,IAAI,CAACoB,IAAI,CAACA,IAAI,CAAC,CAAA;QAC9CV,KAAK,CAAC2J,KAAK,EAAE,CAAA;OACd;AAED2B,MAAAA,oBAAoB,CAAC9C,IAAI,EAAEhH,KAAK,EAAE;QAChC,IAAI,CAACjC,UAAC,CAACwF,SAAS,CAACyD,IAAI,CAAClJ,IAAI,CAACiF,IAAI,CAAC,EAAE,OAAA;AAClCqF,QAAAA,2BAA2B,CACzBpB,IAAI,EACJhI,IAAI,IAAIgB,KAAK,CAACgB,SAAS,CAAChC,IAAI,CAAC,EAC7B6B,mBAAmB,EACnBD,eAAe,EACfE,mBAAmB,EACnBC,WAAW,CACZ,CAAA;OACF;AAEDgJ,MAAAA,mBAAmB,CAAC/C,IAAI,EAAEhH,KAAK,EAAE;QAC/B,MAAM;UAAElC,IAAI;AAAEiK,UAAAA,MAAAA;AAAO,SAAC,GAAGf,IAAI,CAAA;AAC7B,QAAA,IAAIjJ,UAAC,CAACiM,eAAe,CAACjC,MAAM,CAAC,EAAE,OAAA;AAC/B,QAAA,IAAI,CAACA,MAAM,IAAI,CAACf,IAAI,CAACiD,SAAS,EAAE,OAAA;AAChC,QAAA,IAAI,CAACvB,6BAA6B,CAAC5K,IAAI,CAAC,EAAE,OAAA;AAC1CiJ,QAAAA,0BAA0B,CACxBC,IAAI,EACJhI,IAAI,IAAIgB,KAAK,CAACgB,SAAS,CAAChC,IAAI,CAAC,EAC7B6B,mBAAmB,EACnBD,eAAe,EACfE,mBAAmB,EACnBC,WAAW,CACZ,CAAA;AACH,OAAA;AACF,KAAA;GACD,CAAA;AACH,CAAC,CAAC;;;;;;"}
=======
{"version":3,"file":"index.js","sources":["../src/util.ts","../src/index.ts"],"sourcesContent":["import { types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { Scope, NodePath } from \"@babel/traverse\";\nimport type { TraversalAncestors } from \"@babel/types\";\n\nexport function unshiftForXStatementBody(\n  statementPath: NodePath<t.ForXStatement>,\n  newStatements: t.Statement[],\n) {\n  statementPath.ensureBlock();\n  const { scope, node } = statementPath;\n  const bodyScopeBindings = statementPath.get(\"body\").scope.bindings;\n  const hasShadowedBlockScopedBindings = Object.keys(bodyScopeBindings).some(\n    name => scope.hasBinding(name),\n  );\n\n  if (hasShadowedBlockScopedBindings) {\n    // handle shadowed variables referenced in computed keys:\n    // var a = 0;for (const { #x: x, [a++]: y } of z) { const a = 1; }\n    node.body = t.blockStatement([...newStatements, node.body]);\n  } else {\n    node.body.body.unshift(...newStatements);\n  }\n}\n\n/**\n * Test if an ArrayPattern's elements contain any RestElements.\n */\n\nfunction hasArrayRest(pattern: t.ArrayPattern) {\n  return pattern.elements.some(elem => t.isRestElement(elem));\n}\n\n/**\n * Test if an ObjectPattern's properties contain any RestElements.\n */\n\nfunction hasObjectRest(pattern: t.ObjectPattern) {\n  return pattern.properties.some(prop => t.isRestElement(prop));\n}\n\ninterface UnpackableArrayExpression extends t.ArrayExpression {\n  elements: (null | t.Expression)[];\n}\n\nconst STOP_TRAVERSAL = {};\n\ninterface ArrayUnpackVisitorState {\n  deopt: boolean;\n  bindings: Record<string, t.Identifier>;\n}\n\n// NOTE: This visitor is meant to be used via t.traverse\nconst arrayUnpackVisitor = (\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: ArrayUnpackVisitorState,\n) => {\n  if (!ancestors.length) {\n    // Top-level node: this is the array literal.\n    return;\n  }\n\n  if (\n    t.isIdentifier(node) &&\n    t.isReferenced(node, ancestors[ancestors.length - 1].node) &&\n    state.bindings[node.name]\n  ) {\n    state.deopt = true;\n    throw STOP_TRAVERSAL;\n  }\n};\n\nexport type DestructuringTransformerNode =\n  | t.VariableDeclaration\n  | t.ExpressionStatement\n  | t.ReturnStatement;\n\ninterface DestructuringTransformerOption {\n  blockHoist?: number;\n  operator?: t.AssignmentExpression[\"operator\"];\n  nodes?: DestructuringTransformerNode[];\n  kind?: t.VariableDeclaration[\"kind\"];\n  scope: Scope;\n  arrayLikeIsIterable: boolean;\n  iterableIsArray: boolean;\n  objectRestNoSymbols: boolean;\n  useBuiltIns: boolean;\n  addHelper: File[\"addHelper\"];\n}\nexport class DestructuringTransformer {\n  private blockHoist: number;\n  private operator: t.AssignmentExpression[\"operator\"];\n  arrayRefSet: Set<string>;\n  private nodes: DestructuringTransformerNode[];\n  private scope: Scope;\n  private kind: t.VariableDeclaration[\"kind\"];\n  private iterableIsArray: boolean;\n  private arrayLikeIsIterable: boolean;\n  private objectRestNoSymbols: boolean;\n  private useBuiltIns: boolean;\n  private addHelper: File[\"addHelper\"];\n  constructor(opts: DestructuringTransformerOption) {\n    this.blockHoist = opts.blockHoist;\n    this.operator = opts.operator;\n    this.arrayRefSet = new Set();\n    this.nodes = opts.nodes || [];\n    this.scope = opts.scope;\n    this.kind = opts.kind;\n    this.iterableIsArray = opts.iterableIsArray;\n    this.arrayLikeIsIterable = opts.arrayLikeIsIterable;\n    this.objectRestNoSymbols = opts.objectRestNoSymbols;\n    this.useBuiltIns = opts.useBuiltIns;\n    this.addHelper = opts.addHelper;\n  }\n\n  getExtendsHelper() {\n    return this.useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : this.addHelper(\"extends\");\n  }\n\n  buildVariableAssignment(\n    id: t.AssignmentExpression[\"left\"],\n    init: t.Expression,\n  ) {\n    let op = this.operator;\n    if (t.isMemberExpression(id)) op = \"=\";\n\n    let node: t.ExpressionStatement | t.VariableDeclaration;\n\n    if (op) {\n      node = t.expressionStatement(\n        t.assignmentExpression(\n          op,\n          id,\n          t.cloneNode(init) || this.scope.buildUndefinedNode(),\n        ),\n      );\n    } else {\n      let nodeInit: t.Expression;\n\n      if (this.kind === \"const\" && init === null) {\n        nodeInit = this.scope.buildUndefinedNode();\n      } else {\n        nodeInit = t.cloneNode(init);\n      }\n\n      node = t.variableDeclaration(this.kind, [\n        t.variableDeclarator(id, nodeInit),\n      ]);\n    }\n\n    //@ts-expect-error(todo): document block hoist property\n    node._blockHoist = this.blockHoist;\n\n    return node;\n  }\n\n  buildVariableDeclaration(id: t.Identifier, init: t.Expression) {\n    const declar = t.variableDeclaration(\"var\", [\n      t.variableDeclarator(t.cloneNode(id), t.cloneNode(init)),\n    ]);\n    // @ts-expect-error todo(flow->ts): avoid mutations\n    declar._blockHoist = this.blockHoist;\n    return declar;\n  }\n\n  push(id: t.LVal, _init: t.Expression | null) {\n    const init = t.cloneNode(_init);\n    if (t.isObjectPattern(id)) {\n      this.pushObjectPattern(id, init);\n    } else if (t.isArrayPattern(id)) {\n      this.pushArrayPattern(id, init);\n    } else if (t.isAssignmentPattern(id)) {\n      this.pushAssignmentPattern(id, init);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(id, init));\n    }\n  }\n\n  toArray(node: t.Expression, count?: boolean | number) {\n    if (\n      this.iterableIsArray ||\n      (t.isIdentifier(node) && this.arrayRefSet.has(node.name))\n    ) {\n      return node;\n    } else {\n      return this.scope.toArray(node, count, this.arrayLikeIsIterable);\n    }\n  }\n\n  pushAssignmentPattern(\n    { left, right }: t.AssignmentPattern,\n    valueRef: t.Expression | null,\n  ) {\n    // handle array init hole\n    // const [x = 42] = [,];\n    // -> const x = 42;\n    if (valueRef === null) {\n      this.push(left, right);\n      return;\n    }\n\n    // we need to assign the current value of the assignment to avoid evaluating\n    // it more than once\n    const tempId = this.scope.generateUidIdentifierBasedOnNode(valueRef);\n\n    this.nodes.push(this.buildVariableDeclaration(tempId, valueRef));\n\n    const tempConditional = t.conditionalExpression(\n      t.binaryExpression(\n        \"===\",\n        t.cloneNode(tempId),\n        this.scope.buildUndefinedNode(),\n      ),\n      right,\n      t.cloneNode(tempId),\n    );\n\n    if (t.isPattern(left)) {\n      let patternId;\n      let node;\n\n      if (this.kind === \"const\" || this.kind === \"let\") {\n        patternId = this.scope.generateUidIdentifier(tempId.name);\n        node = this.buildVariableDeclaration(patternId, tempConditional);\n      } else {\n        patternId = tempId;\n\n        node = t.expressionStatement(\n          t.assignmentExpression(\"=\", t.cloneNode(tempId), tempConditional),\n        );\n      }\n\n      this.nodes.push(node);\n      this.push(left, patternId);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(left, tempConditional));\n    }\n  }\n\n  pushObjectRest(\n    pattern: t.ObjectPattern,\n    objRef: t.Expression,\n    spreadProp: t.RestElement,\n    spreadPropIndex: number,\n  ) {\n    const value = buildObjectExcludingKeys(\n      pattern.properties.slice(0, spreadPropIndex) as t.ObjectProperty[],\n      objRef,\n      this.scope,\n      name => this.addHelper(name),\n      this.objectRestNoSymbols,\n      this.useBuiltIns,\n    );\n    this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));\n  }\n\n  pushObjectProperty(prop: t.ObjectProperty, propRef: t.Expression) {\n    if (t.isLiteral(prop.key)) prop.computed = true;\n\n    const pattern = prop.value as t.LVal;\n    const objRef = t.memberExpression(\n      t.cloneNode(propRef),\n      prop.key,\n      prop.computed,\n    );\n\n    if (t.isPattern(pattern)) {\n      this.push(pattern, objRef);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(pattern, objRef));\n    }\n  }\n\n  pushObjectPattern(pattern: t.ObjectPattern, objRef: t.Expression | null) {\n    // https://github.com/babel/babel/issues/681\n\n    if (!pattern.properties.length || objRef === null) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(\n            this.addHelper(\"objectDestructuringEmpty\"),\n            objRef !== null ? [objRef] : [],\n          ),\n        ),\n      );\n      return;\n    }\n\n    // if we have more than one properties in this pattern and the objectRef is a\n    // member expression then we need to assign it to a temporary variable so it's\n    // only evaluated once\n\n    if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {\n      const temp = this.scope.generateUidIdentifierBasedOnNode(objRef);\n      this.nodes.push(this.buildVariableDeclaration(temp, objRef));\n      objRef = temp;\n    }\n\n    // Replace impure computed key expressions if we have a rest parameter\n    if (hasObjectRest(pattern)) {\n      let copiedPattern: t.ObjectPattern;\n      for (let i = 0; i < pattern.properties.length; i++) {\n        const prop = pattern.properties[i];\n        if (t.isRestElement(prop)) {\n          break;\n        }\n        const key = prop.key;\n        if (prop.computed && !this.scope.isPure(key)) {\n          const name = this.scope.generateUidIdentifierBasedOnNode(key);\n          this.nodes.push(\n            //@ts-expect-error PrivateName has been handled by destructuring-private\n            this.buildVariableDeclaration(name, key),\n          );\n          if (!copiedPattern) {\n            copiedPattern = pattern = {\n              ...pattern,\n              properties: pattern.properties.slice(),\n            };\n          }\n          copiedPattern.properties[i] = {\n            ...prop,\n            key: name,\n          };\n        }\n      }\n    }\n    //\n\n    for (let i = 0; i < pattern.properties.length; i++) {\n      const prop = pattern.properties[i];\n      if (t.isRestElement(prop)) {\n        this.pushObjectRest(pattern, objRef, prop, i);\n      } else {\n        this.pushObjectProperty(prop, objRef);\n      }\n    }\n  }\n\n  canUnpackArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: t.Expression,\n  ): arr is UnpackableArrayExpression {\n    // not an array so there's no way we can deal with this\n    if (!t.isArrayExpression(arr)) return false;\n\n    // pattern has less elements than the array and doesn't have a rest so some\n    // elements wont be evaluated\n    if (pattern.elements.length > arr.elements.length) return;\n    if (\n      pattern.elements.length < arr.elements.length &&\n      !hasArrayRest(pattern)\n    ) {\n      return false;\n    }\n\n    for (const elem of pattern.elements) {\n      // deopt on holes\n      if (!elem) return false;\n\n      // deopt on member expressions as they may be included in the RHS\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    for (const elem of arr.elements) {\n      // deopt on spread elements\n      if (t.isSpreadElement(elem)) return false;\n\n      // deopt call expressions as they might change values of LHS variables\n      if (t.isCallExpression(elem)) return false;\n\n      // deopt on member expressions as they may be getter/setters and have side-effects\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    // deopt on reference to left side identifiers\n    const bindings = t.getBindingIdentifiers(pattern);\n    const state: ArrayUnpackVisitorState = { deopt: false, bindings };\n\n    try {\n      t.traverse(arr, arrayUnpackVisitor, state);\n    } catch (e) {\n      if (e !== STOP_TRAVERSAL) throw e;\n    }\n\n    return !state.deopt;\n  }\n\n  pushUnpackedArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: UnpackableArrayExpression,\n  ) {\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n      if (t.isRestElement(elem)) {\n        this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));\n      } else {\n        this.push(elem, arr.elements[i]);\n      }\n    }\n  }\n\n  pushArrayPattern(pattern: t.ArrayPattern, arrayRef: t.Expression | null) {\n    if (arrayRef === null) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(this.addHelper(\"objectDestructuringEmpty\"), []),\n        ),\n      );\n      return;\n    }\n    if (!pattern.elements) return;\n\n    // optimise basic array destructuring of an array expression\n    //\n    // we can't do this to a pattern of unequal size to it's right hand\n    // array expression as then there will be values that wont be evaluated\n    //\n    // eg: let [a, b] = [1, 2];\n\n    if (this.canUnpackArrayPattern(pattern, arrayRef)) {\n      return this.pushUnpackedArrayPattern(pattern, arrayRef);\n    }\n\n    // if we have a rest then we need all the elements so don't tell\n    // `scope.toArray` to only get a certain amount\n\n    const count = !hasArrayRest(pattern) && pattern.elements.length;\n\n    // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will\n    // return a locally bound identifier if it's been inferred to be an array,\n    // otherwise it'll be a call to a helper that will ensure it's one\n\n    const toArray = this.toArray(arrayRef, count);\n\n    if (t.isIdentifier(toArray)) {\n      // we've been given an identifier so it must have been inferred to be an\n      // array\n      arrayRef = toArray;\n    } else {\n      arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);\n      this.arrayRefSet.add(arrayRef.name);\n      this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));\n    }\n\n    //\n\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n\n      // hole\n      if (!elem) continue;\n\n      let elemRef;\n\n      if (t.isRestElement(elem)) {\n        elemRef = this.toArray(arrayRef);\n        elemRef = t.callExpression(\n          t.memberExpression(elemRef, t.identifier(\"slice\")),\n          [t.numericLiteral(i)],\n        );\n\n        // set the element to the rest element argument since we've dealt with it\n        // being a rest already\n        this.push(elem.argument, elemRef);\n      } else {\n        elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);\n        this.push(elem, elemRef);\n      }\n    }\n  }\n\n  init(pattern: t.LVal, ref: t.Expression) {\n    // trying to destructure a value that we can't evaluate more than once so we\n    // need to save it to a variable\n\n    if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {\n      const memo = this.scope.maybeGenerateMemoised(ref, true);\n      if (memo) {\n        this.nodes.push(this.buildVariableDeclaration(memo, t.cloneNode(ref)));\n        ref = memo;\n      }\n    }\n\n    //\n\n    this.push(pattern, ref);\n\n    return this.nodes;\n  }\n}\n\ninterface ExcludingKey {\n  key: t.Expression | t.PrivateName;\n  computed: boolean;\n}\n\nexport function buildObjectExcludingKeys<T extends ExcludingKey>(\n  excludedKeys: T[],\n  objRef: t.Expression,\n  scope: Scope,\n  addHelper: File[\"addHelper\"],\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n): t.CallExpression {\n  // get all the keys that appear in this object before the current spread\n\n  const keys = [];\n  let allLiteral = true;\n  let hasTemplateLiteral = false;\n  for (let i = 0; i < excludedKeys.length; i++) {\n    const prop = excludedKeys[i];\n    const key = prop.key;\n    if (t.isIdentifier(key) && !prop.computed) {\n      keys.push(t.stringLiteral(key.name));\n    } else if (t.isTemplateLiteral(key)) {\n      keys.push(t.cloneNode(key));\n      hasTemplateLiteral = true;\n    } else if (t.isLiteral(key)) {\n      // @ts-expect-error todo(flow->ts) NullLiteral\n      keys.push(t.stringLiteral(String(key.value)));\n    } else if (t.isPrivateName(key)) {\n      // private key is not enumerable\n    } else {\n      keys.push(t.cloneNode(key));\n      allLiteral = false;\n    }\n  }\n\n  let value;\n  if (keys.length === 0) {\n    const extendsHelper = useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : addHelper(\"extends\");\n    value = t.callExpression(extendsHelper, [\n      t.objectExpression([]),\n      t.cloneNode(objRef),\n    ]);\n  } else {\n    let keyExpression: t.Expression = t.arrayExpression(keys);\n\n    if (!allLiteral) {\n      keyExpression = t.callExpression(\n        t.memberExpression(keyExpression, t.identifier(\"map\")),\n        [addHelper(\"toPropertyKey\")],\n      );\n    } else if (!hasTemplateLiteral && !t.isProgram(scope.block)) {\n      // Hoist definition of excluded keys, so that it's not created each time.\n      const programScope = scope.getProgramParent();\n      const id = programScope.generateUidIdentifier(\"excluded\");\n\n      programScope.push({\n        id,\n        init: keyExpression,\n        kind: \"const\",\n      });\n\n      keyExpression = t.cloneNode(id);\n    }\n\n    value = t.callExpression(\n      addHelper(`objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`),\n      [t.cloneNode(objRef), keyExpression],\n    );\n  }\n  return value;\n}\n\nexport function convertVariableDeclaration(\n  path: NodePath<t.VariableDeclaration>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope } = path;\n\n  const nodeKind = node.kind;\n  const nodeLoc = node.loc;\n  const nodes = [];\n\n  for (let i = 0; i < node.declarations.length; i++) {\n    const declar = node.declarations[i];\n\n    const patternId = declar.init;\n    const pattern = declar.id;\n\n    const destructuring: DestructuringTransformer =\n      new DestructuringTransformer({\n        // @ts-expect-error(todo): avoid internal properties access\n        blockHoist: node._blockHoist,\n        nodes: nodes,\n        scope: scope,\n        kind: node.kind,\n        iterableIsArray,\n        arrayLikeIsIterable,\n        useBuiltIns,\n        objectRestNoSymbols,\n        addHelper,\n      });\n\n    if (t.isPattern(pattern)) {\n      destructuring.init(pattern, patternId);\n\n      if (+i !== node.declarations.length - 1) {\n        // we aren't the last declarator so let's just make the\n        // last transformed node inherit from us\n        t.inherits(nodes[nodes.length - 1], declar);\n      }\n    } else {\n      nodes.push(\n        t.inherits(\n          destructuring.buildVariableAssignment(pattern, patternId),\n          declar,\n        ),\n      );\n    }\n  }\n\n  let tail: t.VariableDeclaration | null = null;\n  const nodesOut = [];\n  for (const node of nodes) {\n    if (t.isVariableDeclaration(node)) {\n      if (tail !== null) {\n        // Create a single compound declarations\n        tail.declarations.push(...node.declarations);\n        continue;\n      } else {\n        // Make sure the original node kind is used for each compound declaration\n        node.kind = nodeKind;\n        tail = node;\n      }\n    } else {\n      tail = null;\n    }\n    // Propagate the original declaration node's location\n    if (!node.loc) {\n      node.loc = nodeLoc;\n    }\n    nodesOut.push(node);\n  }\n\n  if (nodesOut.length === 1) {\n    path.replaceWith(nodesOut[0]);\n  } else {\n    path.replaceWithMultiple(nodesOut);\n  }\n  scope.crawl();\n}\n\nexport function convertAssignmentExpression(\n  path: NodePath<t.AssignmentExpression>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope, parentPath } = path;\n\n  const nodes: DestructuringTransformerNode[] = [];\n\n  const destructuring = new DestructuringTransformer({\n    operator: node.operator,\n    scope: scope,\n    nodes: nodes,\n    arrayLikeIsIterable,\n    iterableIsArray,\n    objectRestNoSymbols,\n    useBuiltIns,\n    addHelper,\n  });\n\n  let ref: t.Identifier | void;\n  if (\n    (!parentPath.isExpressionStatement() &&\n      !parentPath.isSequenceExpression()) ||\n    path.isCompletionRecord()\n  ) {\n    ref = scope.generateUidIdentifierBasedOnNode(node.right, \"ref\");\n\n    nodes.push(\n      t.variableDeclaration(\"var\", [t.variableDeclarator(ref, node.right)]),\n    );\n\n    if (t.isArrayExpression(node.right)) {\n      destructuring.arrayRefSet.add(ref.name);\n    }\n  }\n\n  destructuring.init(node.left, ref || node.right);\n\n  if (ref) {\n    if (parentPath.isArrowFunctionExpression()) {\n      path.replaceWith(t.blockStatement([]));\n      nodes.push(t.returnStatement(t.cloneNode(ref)));\n    } else {\n      nodes.push(t.expressionStatement(t.cloneNode(ref)));\n    }\n  }\n\n  path.replaceWithMultiple(nodes);\n  scope.crawl();\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport {\n  DestructuringTransformer,\n  convertVariableDeclaration,\n  convertAssignmentExpression,\n  unshiftForXStatementBody,\n  type DestructuringTransformerNode,\n} from \"./util\";\nexport { buildObjectExcludingKeys, unshiftForXStatementBody } from \"./util\";\nimport type { NodePath } from \"@babel/traverse\";\n\n/**\n * Test if a VariableDeclaration's declarations contains any Patterns.\n */\n\nfunction variableDeclarationHasPattern(node: t.VariableDeclaration) {\n  for (const declar of node.declarations) {\n    if (t.isPattern(declar.id)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport interface Options {\n  allowArrayLike?: boolean;\n  loose?: boolean;\n  useBuiltIns?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { useBuiltIns = false } = options;\n\n  const iterableIsArray = (api.assumption(\"iterableIsArray\") ??\n    options.loose ??\n    false) as boolean;\n  const arrayLikeIsIterable = (options.allowArrayLike ??\n    api.assumption(\"arrayLikeIsIterable\") ??\n    false) as boolean;\n  const objectRestNoSymbols = (api.assumption(\"objectRestNoSymbols\") ??\n    options.loose ??\n    false) as boolean;\n\n  return {\n    name: \"transform-destructuring\",\n\n    visitor: {\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        if (!variableDeclarationHasPattern(declaration.node)) return;\n\n        const specifiers = [];\n\n        for (const name of Object.keys(path.getOuterBindingIdentifiers())) {\n          specifiers.push(\n            t.exportSpecifier(t.identifier(name), t.identifier(name)),\n          );\n        }\n\n        // Split the declaration and export list into two declarations so that the variable\n        // declaration can be split up later without needing to worry about not being a\n        // top-level statement.\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n        path.scope.crawl();\n      },\n\n      ForXStatement(path: NodePath<t.ForXStatement>) {\n        const { node, scope } = path;\n        const left = node.left;\n\n        if (t.isPattern(left)) {\n          // for ({ length: k } in { abc: 3 });\n\n          const temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [\n            t.variableDeclarator(temp),\n          ]);\n\n          path.ensureBlock();\n          const statementBody = path.node.body.body;\n          const nodes = [];\n          // todo: the completion of a for statement can only be observed from\n          // a do block (or eval that we don't support),\n          // but the new do-expression proposal plans to ban iteration ends in the\n          // do block, maybe we can get rid of this\n          if (statementBody.length === 0 && path.isCompletionRecord()) {\n            nodes.unshift(t.expressionStatement(scope.buildUndefinedNode()));\n          }\n\n          nodes.unshift(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", left, t.cloneNode(temp)),\n            ),\n          );\n\n          unshiftForXStatementBody(path, nodes);\n          scope.crawl();\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) return;\n\n        const pattern = left.declarations[0].id;\n        if (!t.isPattern(pattern)) return;\n\n        const key = scope.generateUidIdentifier(\"ref\");\n        node.left = t.variableDeclaration(left.kind, [\n          t.variableDeclarator(key, null),\n        ]);\n\n        const nodes: DestructuringTransformerNode[] = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: left.kind,\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n\n        destructuring.init(pattern, key);\n\n        unshiftForXStatementBody(path, nodes);\n        scope.crawl();\n      },\n\n      CatchClause({ node, scope }) {\n        const pattern = node.param;\n        if (!t.isPattern(pattern)) return;\n\n        const ref = scope.generateUidIdentifier(\"ref\");\n        node.param = ref;\n\n        const nodes: DestructuringTransformerNode[] = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: \"let\",\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n        destructuring.init(pattern, ref);\n\n        node.body.body = [...nodes, ...node.body.body];\n        scope.crawl();\n      },\n\n      AssignmentExpression(path, state) {\n        if (!t.isPattern(path.node.left)) return;\n        convertAssignmentExpression(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n\n      VariableDeclaration(path, state) {\n        const { node, parent } = path;\n        if (t.isForXStatement(parent)) return;\n        if (!parent || !path.container) return; // i don't know why this is necessary - TODO\n        if (!variableDeclarationHasPattern(node)) return;\n        convertVariableDeclaration(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n    },\n  };\n});\n"],"names":["unshiftForXStatementBody","statementPath","newStatements","ensureBlock","scope","node","bodyScopeBindings","get","bindings","hasShadowedBlockScopedBindings","Object","keys","some","name","hasBinding","body","t","blockStatement","unshift","hasArrayRest","pattern","elements","elem","isRestElement","hasObjectRest","properties","prop","STOP_TRAVERSAL","arrayUnpackVisitor","ancestors","state","length","isIdentifier","isReferenced","deopt","DestructuringTransformer","constructor","opts","blockHoist","operator","arrayRefSet","nodes","kind","iterableIsArray","arrayLikeIsIterable","objectRestNoSymbols","useBuiltIns","addHelper","Set","getExtendsHelper","memberExpression","identifier","buildVariableAssignment","id","init","op","isMemberExpression","expressionStatement","assignmentExpression","cloneNode","buildUndefinedNode","nodeInit","variableDeclaration","variableDeclarator","_blockHoist","buildVariableDeclaration","declar","push","_init","isObjectPattern","pushObjectPattern","isArrayPattern","pushArrayPattern","isAssignmentPattern","pushAssignmentPattern","toArray","count","has","left","right","valueRef","tempId","generateUidIdentifierBasedOnNode","tempConditional","conditionalExpression","binaryExpression","isPattern","patternId","generateUidIdentifier","pushObjectRest","objRef","spreadProp","spreadPropIndex","value","buildObjectExcludingKeys","slice","argument","pushObjectProperty","propRef","isLiteral","key","computed","callExpression","isStatic","temp","copiedPattern","i","isPure","canUnpackArrayPattern","arr","isArrayExpression","isSpreadElement","isCallExpression","getBindingIdentifiers","traverse","e","pushUnpackedArrayPattern","arrayExpression","arrayRef","add","elemRef","numericLiteral","ref","memo","maybeGenerateMemoised","excludedKeys","allLiteral","hasTemplateLiteral","stringLiteral","isTemplateLiteral","String","isPrivateName","extendsHelper","objectExpression","keyExpression","isProgram","block","programScope","getProgramParent","convertVariableDeclaration","path","nodeKind","nodeLoc","loc","declarations","destructuring","inherits","tail","nodesOut","isVariableDeclaration","replaceWith","replaceWithMultiple","crawl","convertAssignmentExpression","parentPath","isExpressionStatement","isSequenceExpression","isCompletionRecord","isArrowFunctionExpression","returnStatement","variableDeclarationHasPattern","declare","api","options","assertVersion","assumption","loose","allowArrayLike","visitor","ExportNamedDeclaration","declaration","specifiers","getOuterBindingIdentifiers","exportSpecifier","insertAfter","exportNamedDeclaration","ForXStatement","statementBody","CatchClause","param","AssignmentExpression","VariableDeclaration","parent","isForXStatement","container"],"mappings":"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"}
>>>>>>> aa9555174f0cb4a525242493edcdb44bcc81bab9
